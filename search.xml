<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Advanced BIM Seminar</title>
    <url>/blog/2020/05/30/Advanced-BIM-Seminar/</url>
    <content><![CDATA[<p>整理收集了一些课堂资料</p>
<span id="more"></span>

<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590844248/BIM/123_xsfpnp.png" title="AIA und BAP"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590844249/BIM/421241_ijpchl.png" title="LOD的一些定义"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590844249/BIM/123124_ax7re2.png" title="一些节点上实际运用的软件"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590844249/BIM/15135_j9en3b.png" title="两个有用的族库：BIMObject和BIMcatalogs.net"></p>
<p>test<br>test2</p>
]]></content>
      <categories>
        <category>BIM</category>
      </categories>
      <tags>
        <tag>BIM</tag>
      </tags>
  </entry>
  <entry>
    <title>BIM的一些基础概念整理</title>
    <url>/blog/2020/05/30/BIM%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>基于课堂资料整理汇总了一些基本概念。</p>
<span id="more"></span>

<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/1_tnsgfn.png"></p>
<p>3D Geometric model: 3D wireframe + 3D surface models + 3D solid models</p>
<p>Solid model : explicit models  + implicit models</p>
<h3 id="Explicit-models"><a href="#Explicit-models" class="headerlink" title="Explicit models"></a>Explicit models</h3><p>Boundary representation: describe a solid by means of its boundary, basic components: faces, edges, vertices</p>
<p>Example:</p>
<ol>
<li><p>Triangulated Face Set : 缺点: </p>
<ul>
<li><p>only plane faces </p>
</li>
<li><p>curved surfaces -&gt; many triangles </p>
</li>
<li><p>vertices are stored multiple times </p>
</li>
<li><p>neighbourhood relationships are not stored -&gt; gaps and overlaps are hard to detect</p>
</li>
</ul>
</li>
<li><p>Indexed Face Set: IFC  </p>
<ul>
<li>vertex coordinates are stored only once </li>
<li>each vertex gets an ID (&#x3D;Index) </li>
<li>faces refer to indices</li>
</ul>
</li>
<li><p>High-end Boundary Models: </p>
<ul>
<li>additional edge table </li>
<li>faces refer to edges, edges refer to vertices </li>
<li>each edge is referred by two faces; consistency checks </li>
<li>allows to describe curved edges</li>
</ul>
</li>
</ol>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/3_eqeew1.png"></p>
<p><strong>ACIS</strong> is a <a href="https://en.wikipedia.org/wiki/Geometric_modeling_kernel">geometric modeling kernel</a>, SAT file read it</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/4_gokpjf.png"></p>
<h3 id="Implicit-Models"><a href="#Implicit-Models" class="headerlink" title="Implicit Models"></a>Implicit Models</h3><p>Extrusion 推 and Rotation Geometry几何图形 to build a solid</p>
<h4 id="Constructive-Solid-Geometry-CSG"><a href="#Constructive-Solid-Geometry-CSG" class="headerlink" title="Constructive Solid Geometry (CSG)"></a>Constructive Solid Geometry (CSG)</h4><ul>
<li>set of primitive objects </li>
<li>combination by Boolean operations (union, intersection, difference) </li>
<li>tree structure</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590846748/BIM/1231_mkzcxs.png"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/5_uoiesj.png"></p>
<h3 id="Parametric-Modeling"><a href="#Parametric-Modeling" class="headerlink" title="Parametric Modeling"></a>Parametric Modeling</h3><h4 id="Object-based-parametric-modelling-autocad-architecture"><a href="#Object-based-parametric-modelling-autocad-architecture" class="headerlink" title="Object-based parametric modelling: autocad architecture"></a><strong>Object-based parametric modelling</strong>: autocad architecture</h4><ul>
<li><p>parameters &#x3D; attributes of objects defining shape and&#x2F;or location</p>
</li>
<li><p>objects have pre-defined geometric and non-geometric attributes</p>
</li>
<li><p>Advantages : pre-defined types offer tight integration of geometry and semantics-&gt; important for downstream applications </p>
</li>
<li><p>Limitations : inflexibility regarding „non standard“ types &#x2F; shapes</p>
</li>
</ul>
<h4 id="Sketch-based-parametric-modelling-autocad"><a href="#Sketch-based-parametric-modelling-autocad" class="headerlink" title="Sketch-based parametric modelling: autocad"></a><strong>Sketch-based parametric modelling:</strong> autocad</h4><ul>
<li><p>Parameters &#x3D; explicitly defined parameters of the geometric model</p>
</li>
<li><p>Advantages: 1. very powerful constraint system 2. rapid development of the parametric model Limitations</p>
</li>
<li><p>Limitations : 1. no semantics 2. complexity can become very high (hardly manageable)</p>
</li>
</ul>
<h4 id="Graph-based-parametric-modeling-rhnio"><a href="#Graph-based-parametric-modeling-rhnio" class="headerlink" title="Graph-based parametric modeling: rhnio"></a><strong>Graph-based parametric modeling:</strong> rhnio</h4><ul>
<li><p>Parametrics &#x3D; Location and shape of model elements is steered by visual program </p>
</li>
<li><p>Advantages: widely adopted by designers; form-finding process </p>
</li>
<li><p>Limitations: pure 3D, no semantics -&gt;no standards-conforming drawings -&gt; limited usability for downstream applications (simulations etc.)</p>
</li>
</ul>
<h4 id="Parametric-BIM-Modelers-revit"><a href="#Parametric-BIM-Modelers-revit" class="headerlink" title="Parametric BIM Modelers: revit"></a><strong>Parametric BIM Modelers:</strong> revit</h4><ul>
<li>combine object-based modeling with parametric geometry -&gt; user define families</li>
</ul>
<p>-&gt; <strong>Object-oriented Modeling:</strong>  Objects combining geometry and semantics</p>
<ul>
<li>Catalogue of parametric object types (Walls, Columns, Doors, Windows, etc.) </li>
<li>objects have geometric and non-geometric attributes </li>
<li>necessary for downstream applications (simulation, analysis, quantity take-off)</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/6_rgptkj.png"></p>
<h3 id="Industry-Foundation-Classes-IFC"><a href="#Industry-Foundation-Classes-IFC" class="headerlink" title="Industry Foundation Classes (IFC)"></a>Industry Foundation Classes (IFC)</h3><ul>
<li><p>standardized data model for the exchange of Building Information Models -&gt; geometry and semantics!!</p>
</li>
<li><p>IFC is based on the ISO-Standard STEP (ISO 10303) </p>
</li>
<li><p>STEP: <strong>ST</strong>andard for the <strong>E</strong>xchange of <strong>P</strong>roduct model data: Product Model &#x3D; Geometry + Semantics</p>
</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/7_lxjolm.png"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/8_dvbkoo.png"></p>
<h3 id="Model-View-Definition-MVD"><a href="#Model-View-Definition-MVD" class="headerlink" title="Model View Definition (MVD)"></a>Model View Definition (MVD)</h3><ul>
<li><p>a model view defines a subset of the full IFC schema; 以下是Pre-defined IFC Model Views by buildingSMART </p>
</li>
<li><p>IFC 2x3:  - Coordination view - Structural analysis view - Facility management handover view </p>
</li>
<li><p>IFC 4: - Reference view - Design Transfer View</p>
</li>
</ul>
<h3 id="Standard-IFC-Export-from-Revit"><a href="#Standard-IFC-Export-from-Revit" class="headerlink" title="Standard IFC-Export from Revit"></a>Standard IFC-Export from Revit</h3><p>All user-defined Revit Families will be exported as <em>IfcBuildingElementProxy,</em> Revit-Parameters will not exported correctly &#x2F; completely</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/9_tlac26.png"></p>
<p><strong>Solution:</strong> Use of familiy parameters IfcExportAs &#x2F; IfcExportType </p>
<ul>
<li><p>IfcExportAs (sets a specific IFC class or prevents export: DontExport) </p>
</li>
<li><p>IfcExportType (sets a defined type [subcategory] of an IFC class)</p>
</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/10_fefza5.png"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/11_llivns.png"></p>
<h3 id="Sustainability"><a href="#Sustainability" class="headerlink" title="Sustainability"></a>Sustainability</h3><p>Green building certification system; DGNB; BIM 又多了2个D</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/12_mjwdfq.png"></p>
<p><strong>Daylight factor (DF)</strong> </p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845965/BIM/13_yhnw8d.png"></p>
<p>It is defined as the ratio of the indoor illuminance to the outdoor horizontal illuminance under the overcast CIE sky. The major weakness of the daylight factor is that the orientation of the investigated building does not influence the daylight factor since the CIE reference sky is rotationally invariant and independent of the geographical latitude of the investigated building.</p>
<h3 id="Daylight-Autonomy-DA"><a href="#Daylight-Autonomy-DA" class="headerlink" title="Daylight Autonomy (DA)"></a>Daylight Autonomy (DA)</h3><p>The daylight autonomy at a point in a building is defined as the percentage of occupied hours per year, when the minimum illuminance level can be maintained by daylight alone.单独仅使用自然光照的时间百分比 In contrast to the more commonly used daylight factor, the daylight autonomy considers all sky conditions throughout the year. A daylight autonomy of 70% for a work place with working hours on weekdays between 8 a.m. and 6 p.m. and a minimum illuminance levels of 500 lux implies that the occupant can – in principle – work 70% of the year by daylight alone.</p>
<h3 id="Useful-Daylight-Illuminances-UDI"><a href="#Useful-Daylight-Illuminances-UDI" class="headerlink" title="Useful Daylight Illuminances (UDI)"></a>Useful Daylight Illuminances (UDI)</h3><p>As its name suggests, it aims to determine when daylight levels are ‘useful’ for the occupant, i.e. neither too dark（&lt; 100 lux）nor too bright (&gt;2000 lux). Based on the upper and lower thresholds of 2000 lux and 100 lux, UDI results in three metrics, i.e. the percentages of the occupied times of the year when the UDI was achieved (100-2000lux), fell-short (&lt;100 lux), or was exceeded (&gt; 2000 lux).</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845966/BIM/14_tpyy5g.png"></p>
<h3 id="spatial-Daylight-Autonomy-sDA"><a href="#spatial-Daylight-Autonomy-sDA" class="headerlink" title="spatial Daylight Autonomy (sDA)"></a>spatial Daylight Autonomy (sDA)</h3><p>sDA is the percent of analysis points across the analysis area that meet or exceed _DLAIllumThresholds value (set to 300 lux for LEED) for at least 50% of the analysis period. One number for the space.</p>
<h3 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h3><p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/15_smhrlz.png"></p>
<h3 id="Collaboration"><a href="#Collaboration" class="headerlink" title="Collaboration"></a><strong>Collaboration</strong></h3><h4 id="Synchronous-collaboration"><a href="#Synchronous-collaboration" class="headerlink" title="Synchronous collaboration"></a>Synchronous collaboration</h4><ul>
<li><p>simultaneous work on the same subject </p>
</li>
<li><p>examples: Google Docs, Microsoft OneDrive (Collaborative writing)</p>
</li>
</ul>
<h4 id="Asynchronous-collaboration"><a href="#Asynchronous-collaboration" class="headerlink" title="Asynchronous collaboration"></a>Asynchronous collaboration</h4><ul>
<li><p>temporally separated collaboration </p>
</li>
<li><p>examples: email, DropBox; <strong>major form of collaboration in design &amp; engineering</strong></p>
</li>
</ul>
<h4 id="Synchronous-collaboration-1"><a href="#Synchronous-collaboration-1" class="headerlink" title="Synchronous collaboration"></a>Synchronous collaboration</h4><ul>
<li><p>explicit synchronization &#x3D; invoked by the user </p>
</li>
<li><p>implicit synchronization &#x3D; done automatically in the background</p>
</li>
</ul>
<p>Concurrency Control: Locks prevent the simultaneous modification of the same object.</p>
<p><u>retrieve lock-&gt; modification -&gt;release lock</u></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/16_kmuw6j.png"></p>
<h4 id="Issue-Tracking-in-asynchronous-collaboration"><a href="#Issue-Tracking-in-asynchronous-collaboration" class="headerlink" title="Issue Tracking in asynchronous collaboration"></a>Issue Tracking in asynchronous collaboration</h4><ul>
<li><p>Errors &#x2F; issues to the responsible model authors </p>
</li>
<li><p>BIM Collaboration Format (BCF)</p>
</li>
</ul>
<h3 id="BIM-Collaboration-Format-BCF-Usage-of-BCF-for-Issue-Management"><a href="#BIM-Collaboration-Format-BCF-Usage-of-BCF-for-Issue-Management" class="headerlink" title="BIM Collaboration Format (BCF) : Usage of BCF for Issue Management"></a>BIM Collaboration Format (BCF) : Usage of BCF for Issue Management</h3><ul>
<li>BuildingSMART standard </li>
<li>transports issues <ul>
<li>Request for Information (RFI) </li>
<li>Request for Change (RFC)</li>
</ul>
</li>
<li>very helpful technology for cross-discipline coordination </li>
<li>ZIP-File containing : <ul>
<li>XML-File: which model element are highlighted, shown, hidden; camera position, direction and zoom ; textual description of the issue </li>
<li>Screenshot</li>
</ul>
</li>
</ul>
<h3 id="Common-Data-Environment-CDE-defines-principles-of-how-models-are-stored-and-accessed-in-a-central-system"><a href="#Common-Data-Environment-CDE-defines-principles-of-how-models-are-stored-and-accessed-in-a-central-system" class="headerlink" title="Common Data Environment (CDE) : defines principles of how models are stored and accessed in a central system"></a><strong>Common Data Environment (CDE) :</strong> defines principles of how models are stored and accessed in a central system</h3><ul>
<li>sub-models are created independently</li>
<li>merged in regular intervals into a coordination model </li>
<li>resolve all clashes </li>
<li>model statuses: - work in progress (WIP) - shared - published - archived </li>
<li>transition between statuses requires approval</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/17_n8rouk.png"></p>
<h3 id="BS-PAS-1192-2-2013-BIM-project-execution"><a href="#BS-PAS-1192-2-2013-BIM-project-execution" class="headerlink" title="BS PAS 1192-2:2013 -&gt; BIM project execution"></a>BS PAS 1192-2:2013 -&gt; BIM project execution</h3><ul>
<li>describes general BIM practices </li>
<li>BIM project procurement; BIM requirements; data management </li>
<li>leaves details to individual projects </li>
<li>used throughout out the world as basis for BIM contracts</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845963/BIM/19_hmypkm.png"></p>
<p>Start point of BIM project: <strong>Employer‘s Information Requirements (EIR):</strong> they set out clearly to the bidder <strong>what models are required</strong> and <strong>what the purposes of the models will be ; defines goals of the BIM project, define BIM use cases, define model content, e.g. level of development, classification system</strong> </p>
<h3 id="Level-of-Development-LOD-Level-of-Geometry-Level-of-Information"><a href="#Level-of-Development-LOD-Level-of-Geometry-Level-of-Information" class="headerlink" title="Level of Development (LOD) : Level of Geometry + Level of Information"></a>Level of Development (LOD) : Level of Geometry + Level of Information</h3><p> <img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/20_z7szrv.png"></p>
<ul>
<li>LOD100: symbol or other generic representation. </li>
<li>LOD200: approximate quantities, size, shape, location, and orientation. </li>
<li>LOD300: specific system, object or assembly </li>
<li>LOD350: and interfaces with other building systems. </li>
<li>LOD400: with detailing, fabrication, assembly, and installation information. </li>
<li>LOD500: The Model Element is a <strong>field verified r</strong>epresentation in terms of size, shape, location, quantity, and orientation.</li>
</ul>
<p><strong>There is no strict correspondence between LODs and design phases:</strong> project models at any stage of delivery will invariably contain elements at different levels of development.</p>
<h3 id="Classification-Systems"><a href="#Classification-Systems" class="headerlink" title="Classification Systems :"></a>Classification Systems :</h3><p>OmniClass (US), Uniclass (UK), DIN276 (DE), ASB-ING</p>
<h3 id="BIM-Execution-Plan-（BEP）"><a href="#BIM-Execution-Plan-（BEP）" class="headerlink" title="BIM Execution Plan （BEP）"></a>BIM Execution Plan （BEP）</h3><ul>
<li><p>Created by the bidder(投标人) in response to the <strong>Employer’s Information Requirements (EIR)</strong></p>
</li>
<li><p>Typically includes detailed information: </p>
<ul>
<li>BIM use cases: </li>
<li>BIM workflow and data management </li>
<li>Model contents: model elements, classification, levels of detail, file formats, coordinate system, etc. </li>
<li>Delivery: responsibilities, milestones, 2D and 3D, etc</li>
</ul>
</li>
<li><p>Master Information Delivery Plan：part of BEP, lists information deliverables</p>
</li>
</ul>
<h3 id="Information-Delivery-Manual-IDM"><a href="#Information-Delivery-Manual-IDM" class="headerlink" title="Information Delivery Manual (IDM):"></a>Information Delivery Manual (IDM):</h3><ul>
<li><p>describes processes and information flows for planning, constructing and operating buildings</p>
</li>
<li><p>definition of the information, which is exchanged between the participants</p>
</li>
<li><p>the resulting document forms the basis for contracts and software implementation &#x2F; certification</p>
</li>
<li><p>describes processes and exchange requirements </p>
</li>
<li><p>Business Process Modeling Notation (BPMN)</p>
</li>
</ul>
<h3 id="Model-View-Definition-MVD-1"><a href="#Model-View-Definition-MVD-1" class="headerlink" title="Model View Definition (MVD)"></a>Model View Definition (MVD)</h3><ul>
<li><p>technical implementation for specifying data needs </p>
</li>
<li><p>defines a subset of the IFC schema </p>
</li>
<li><p>for realizing a specific data-exchange scenario</p>
</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/21_n0rpqr.png"></p>
<h3 id="BuildingSMART-Development-and-maintenance-of-international-standards-for-open-BIM"><a href="#BuildingSMART-Development-and-maintenance-of-international-standards-for-open-BIM" class="headerlink" title="BuildingSMART: Development and maintenance of international standards for open BIM"></a>BuildingSMART: Development and maintenance of international standards for open BIM</h3><ul>
<li>Processes - information delivery manuals </li>
<li>Data Dictionary - it maintains the <strong>International Framework for Dictionaries</strong> (IFD) Library </li>
<li>Data model - the organization manages the software neutral <strong>Industry Foundation Classes (IFC)</strong> data model </li>
<li>BIM Collaboration Format - structured file format suited to issue tracking (BCF)</li>
</ul>
<h3 id="CityGML-City-Geography-Markup-Language"><a href="#CityGML-City-Geography-Markup-Language" class="headerlink" title="CityGML &#x3D; City Geography Markup Language"></a>CityGML &#x3D; City Geography Markup Language</h3><p>Standard for storing and transferring virtual 3D city and regional models, Representation in four aspects - <strong>geometry , topology, semantics and appearance for all 3D geo-objects</strong></p>
<p>UIM – Urban Information Model : It aims at modeling the knowledge of urban environment.</p>
<p>CIM – City Information Model</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590845964/BIM/22_wy7fl0.png"></p>
]]></content>
      <categories>
        <category>BIM</category>
      </categories>
      <tags>
        <tag>BIM</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit 二次开发电缆布置</title>
    <url>/blog/2020/09/19/Revit-%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E7%94%B5%E7%BC%86%E5%B8%83%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="C-中的goto跳转语句"><a href="#C-中的goto跳转语句" class="headerlink" title="C#中的goto跳转语句"></a>C#中的goto跳转语句</h3><ol>
<li>goto语句不可以跳到for循环中</li>
<li>goto语句不可以跳到类的外面。</li>
<li>goto语句不可以退出try{}catch()finally{}语句。</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;<span class="comment">//自己命名一个label</span></span><br><span class="line">statement01;  <span class="comment">//这句是跳过的语句</span></span><br><span class="line">label:<span class="comment">//goto到这个标签，从这里开始执行语句</span></span><br><span class="line">statement02;  <span class="comment">//执行的语句</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Revit, C#</category>
      </categories>
      <tags>
        <tag>Revit, C#, MEP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leistungsphasen备忘</title>
    <url>/blog/2020/05/25/Leistungsphasen/</url>
    <content><![CDATA[<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590418440/2334_kbjm9v.png" title="Leistungsphasen 1-9"></p>
<h2 id="LP4-Genehmigungsplanung-Eingabeplanung-Einreichplanung"><a href="#LP4-Genehmigungsplanung-Eingabeplanung-Einreichplanung" class="headerlink" title="LP4 Genehmigungsplanung &#x2F; Eingabeplanung &#x2F; Einreichplanung"></a>LP4 Genehmigungsplanung &#x2F; Eingabeplanung &#x2F; Einreichplanung</h2><p>Der Bauantrag ist schriftlich bei der unteren Bauaufsichtsbehörde einzureichen. Mit dem Bauantrag sind alle für die Beurteilung des Bauvorhabens und die Bearbeitung des Bauantrags erforderlichen Unterlagen (Bauvorlagen) einzureichen. Näheres regeln in Deutschland die entsprechenden Rechtsverordnungen der Bundesländer (Bauvorlagenverordnungen).</p>
<p>Ein Bauantrag besteht in Deutschland meist aus folgenden Teilen:</p>
<ol>
<li>Eingabeplan mit Grundrissen, Ansichten und Schnitten im Maßstab 1:100</li>
<li>Bauantragsformular</li>
<li>Baubeschreibung</li>
<li>statistischer Erhebungsbogen</li>
<li>Wärmeschutznachweis</li>
<li>Standsicherheitsnachweis (Statische Berechnung, Statik)</li>
<li>amtlicher Lageplan zum Bauantrag, meist im Maßstab 1:200 (kleinere Maßstäbe nur bei großen Grundstücken)</li>
<li>ggf. weiteren notwendigen Nachweisen und Angaben, die zur Erteilung der Genehmigung von der Bauaufsichtsbehörde gefordert werden.</li>
</ol>
]]></content>
      <categories>
        <category>informations</category>
      </categories>
      <tags>
        <tag>LP</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamo学习笔记</title>
    <url>/blog/2020/05/22/Dynamo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<ul>
<li>dynamo里单位是毫米</li>
<li>var[][]表示的数据类型为二维数组，即至少有L3的列表</li>
<li>CSV：Comma-Separated Values 用逗号分隔的数据形式，input进dynamo用节点csv import </li>
<li>创建标高：level</li>
<li><span style="color:red;">节点<strong>set parameter by name</strong>: 通过看revit图元中属性中的参数名字给这个参数赋值；<br>节点<strong>get parameter value by name</strong>: 可以输入参数名字来提取参数的值</li>
<li><span style="color:green;">节点<strong>filter by bool mask</strong>: mask中输入一系列bool值可以筛选ture的进in里 false进out里</li>
<li>ToLower : 大写转小写</li>
<li>string类型转bool可以用&#x3D;&#x3D;，判断俩string是不是一致，一致输出的就是bool true, 否则 bool false</li>
<li>节点floorplan: 根据标高level创建平面视图</li>
<li>节点type: 看值的类型</li>
<li>如果出现结果有问题但没有报错可能是lacing连缀有问题要更改</li>
<li>节点geometry.translate: 位移</li>
<li>快捷键ctrl + G: 把几个模块整合成一个组</li>
<li>鼠标右键preview 预览之前的，把其去钩表示显示最新的</li>
<li><span style="color:red;">节点<strong>point at parameter</strong>： 根据设置的节点向量个数和曲线curve得到曲线上的点</li>
<li><span style="color:red;">code block 中创建一个简单list的语法：0..1..#24：表示起始0，终点1，一共24项，注意#不能忘记</li>
<li>节点Drop: 去掉list中的某个项，注意list的分级</li>
<li>节点line: 画线，起点终点</li>
<li>节点flatten: 把多层级的list拍平，可以用来改变list的层级结构</li>
<li>节点plane by three points: 通过三个点来创建平面，平面不显示，但于线相交用geomery.intersect可以显示出点。</li>
<li>节点geometry.translate也可以用来阵列具体做法是在例如z轴输入一个list,里面储存了递增的距离，如0..300..#30, 则为阵列30份，直到高度300</li>
<li>节点polycurve by point: 根据点来画多段线弧线</li>
<li><span style="color:red;">节点<strong>list.schiftIndices</strong>: 输入amount 1表示把列表的最后一个项放到第一位，其他的往后退一位；输入amount 2表示把列表的最后两项放到前两位，其他的往后退2位，以此类推</li>
<li>节点<strong>list.transpose</strong>:转制，行变列，列变行</li>
<li>list.count： 输出list的长度</li>
<li><span style="color:red;">节点<strong>curve.sweepAsSolid</strong>: 输入闭合的曲线（作为截面），和线作为拉伸路径（注意这里的必须输入的是一个curve如line,bspline,nurb而不是polycurve 因为poly本质是个list），拉伸为一个实体，输入的东西可为列表，则批量拉伸</li>
<li>line.byTangency创建curve的切线</li>
<li>line.direction: 获得线方向上的向量</li>
<li>将dynamo中的模型输入revit使其变成一个族实例用DirectSchape.ByGeometry</li>
<li>code block 中是使用的design script即dynamo 自己的语言<ul>
<li><span style="color:red;">code block 创建list：<ul>
<li>codeblock 提取列表元素： a[0]<br>  [1,2,3,4] 直接输出list 1，2，3，4<br>  0..100..10; 首项..末项..项差 -&gt; range<br>  0..#100..10; 首相..项数..项差 -&gt; sequence<br>  0..100..#10； 首相..末项..项数</li>
</ul>
</li>
</ul>
</li>
<li>用节点python script 可输入python code</li>
<li><span style="color:blue;">revit中族的一个树状结构，里面包含了其的4层信息，所以想通过dynamo逆向提取revit模型中的信息或特定模型，逻辑上应该是<ol>
<li>先找到根即category -&gt; 命令categories</li>
<li>细化过滤筛选family type -&gt; 命令all placed family types of category</li>
<li>筛选得到instance -&gt; 命令all elements of family type; 获得的instance可用elements.geometry展示<br><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590261055/abc_hc8z9c.png" alt="族的结构"></li>
</ol>
</li>
<li>节点export excel： data中要求输入二维列表数据</li>
<li>Dynamo编程如果出错，应该查input output， 查lacing，查作用域即List分级</li>
</ul>
]]></content>
      <categories>
        <category>Dynamo, revit</category>
      </categories>
      <tags>
        <tag>Dynamo, revit</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown插入数学公式</title>
    <url>/blog/2020/05/22/Markdown%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>原生的Hexo并不支持数学公式的显示，需要加载Mathjax插件。MathJax使用网络字体（大部分浏览器都支持）去产生高质量的排版，使其在所有分辨率都可缩放和显示，这远比使用包含公式的图片要有效得多。使用MathJax显示数学公式是基于文本的，而非图片。它可以被搜索引擎使用，这意味着方程式和页面上的文字一样是可以被搜索的。 MathJax允许页面作者使用TeX、LaTeX符号和 MathML 或者 AsciiMath 去书写公式。</p>
<span id="more"></span>
<h2 id="需要在文章头添加mathjax开关"><a href="#需要在文章头添加mathjax开关" class="headerlink" title="需要在文章头添加mathjax开关"></a>需要在文章头添加mathjax开关</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Markdown插入数学公式</span><br><span class="line">date:</span><br><span class="line">tags: markdown</span><br><span class="line">categories: markdown</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul>
<li><p>在正文中同一行插入LaTeX公式用<code>$...$</code>定义</p>
<ul>
<li>例如语句为<code>$\sum_&#123;i=0&#125;^N\int_&#123;a&#125;^&#123;b&#125;g(t,i)\text&#123;d&#125;t$</code></li>
<li>显示为$\sum_{i&#x3D;0}^N\int_{a}^{b}g(t,i)\text{d}t$</li>
</ul>
</li>
<li><p>另起一行显示LaTeX公式用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$...$$</span><br></pre></td></tr></table></figure>

<ul>
<li>例如语句为<code>$$W_G^&#123;mn&#125;=max\&#123;0,W_G.\xi_G(f_G^m,f_G^n)\&#125;$$</code></li>
<li>显示为$$W_G^{mn}&#x3D;max{0,W_G.\xi_G(f_G^m,f_G^n)}$$</li>
</ul>
</li>
</ul>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>注意乘法不能直接打*而是要打表中命令</p>
<table>
<thead>
<tr>
<th align="left">显示</th>
<th align="left">命令</th>
<th align="left">显示</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">±</td>
<td align="left">\pm</td>
<td align="left">∓</td>
<td align="left">\mp</td>
</tr>
<tr>
<td align="left">×</td>
<td align="left">\times</td>
<td align="left">∗</td>
<td align="left">\ast</td>
</tr>
<tr>
<td align="left">⋆</td>
<td align="left">\star</td>
<td align="left">∘</td>
<td align="left">\circ</td>
</tr>
<tr>
<td align="left">∙</td>
<td align="left">\bullet</td>
<td align="left">⋅</td>
<td align="left">\cdot</td>
</tr>
<tr>
<td align="left">÷</td>
<td align="left">\div</td>
<td align="left">∑</td>
<td align="left">\sum</td>
</tr>
<tr>
<td align="left">∏</td>
<td align="left">\prod</td>
<td align="left">∐</td>
<td align="left">\coprod</td>
</tr>
<tr>
<td align="left">⊕</td>
<td align="left">\oplus</td>
<td align="left">⨁</td>
<td align="left">\bigoplus</td>
</tr>
<tr>
<td align="left">⊖</td>
<td align="left">\ominus</td>
<td align="left">⊗</td>
<td align="left">\otimes</td>
</tr>
<tr>
<td align="left">⨂</td>
<td align="left">\bigotimes</td>
<td align="left">⊘</td>
<td align="left">\oslash</td>
</tr>
<tr>
<td align="left">⊙</td>
<td align="left">\odot</td>
<td align="left">⨀</td>
<td align="left">\bigodot</td>
</tr>
<tr>
<td align="left">⋄</td>
<td align="left">\diamond</td>
<td align="left">△</td>
<td align="left">\bigtriangleup</td>
</tr>
<tr>
<td align="left">▽</td>
<td align="left">\bigtriangledown</td>
<td align="left">◃</td>
<td align="left">\triangleleft$</td>
</tr>
<tr>
<td align="left">▹</td>
<td align="left">\triangleright</td>
<td align="left">▹</td>
<td align="left">\triangleright</td>
</tr>
<tr>
<td align="left">◯</td>
<td align="left">\bigcirc</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th align="left">显示</th>
<th align="left">命令</th>
<th align="left">显示</th>
<th align="left">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">∣</td>
<td align="left">\mid</td>
<td align="left">∤</td>
<td align="left">\nmid</td>
</tr>
<tr>
<td align="left">⋅</td>
<td align="left">\cdot</td>
<td align="left">≤</td>
<td align="left">\leq</td>
</tr>
<tr>
<td align="left">≥</td>
<td align="left">\geq</td>
<td align="left">≠</td>
<td align="left">\neq</td>
</tr>
<tr>
<td align="left">≈</td>
<td align="left">\approx</td>
<td align="left">≡</td>
<td align="left">\equiv</td>
</tr>
<tr>
<td align="left">≺</td>
<td align="left">\prec</td>
<td align="left">⪯</td>
<td align="left">\preceq</td>
</tr>
<tr>
<td align="left">≪</td>
<td align="left">\ll</td>
<td align="left">≻</td>
<td align="left">\succ</td>
</tr>
<tr>
<td align="left">⪰</td>
<td align="left">\succeq</td>
<td align="left">≫</td>
<td align="left">\gg</td>
</tr>
<tr>
<td align="left">∼</td>
<td align="left">\sim</td>
<td align="left">≃</td>
<td align="left">\simeq</td>
</tr>
<tr>
<td align="left">≍</td>
<td align="left">\asymp</td>
<td align="left">≅</td>
<td align="left">\cong</td>
</tr>
<tr>
<td align="left">≐</td>
<td align="left">\doteq</td>
<td align="left">∝</td>
<td align="left">\propto</td>
</tr>
<tr>
<td align="left">⊨</td>
<td align="left">\models</td>
<td align="left">∥</td>
<td align="left">\parallel</td>
</tr>
<tr>
<td align="left">⋈</td>
<td align="left">\bowtie</td>
<td align="left">⊥</td>
<td align="left">\perp</td>
</tr>
<tr>
<td align="left">∘</td>
<td align="left">\circ</td>
<td align="left">∗</td>
<td align="left">\ast</td>
</tr>
<tr>
<td align="left">⨀</td>
<td align="left">\bigodot</td>
<td align="left">⨂</td>
<td align="left">\bigotimes</td>
</tr>
<tr>
<td align="left">⨁</td>
<td align="left">\bigoplus</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x<span class="built_in">_</span>1<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x<span class="built_in">_</span>1<span class="built_in">^</span>2<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x<span class="built_in">^</span>2<span class="built_in">_</span>1<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x<span class="built_in">_</span>&#123;22&#125;<span class="built_in">^</span>&#123;(n)&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span>x<span class="built_in">_</span>&#123;123&#125;<span class="built_in">^</span>&#123;1234&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>$$<br>x_1<br>$$</p>
<p>$$<br>x_1^2<br>$$</p>
<p>$$<br>x_{22}^{(n)}<br>$$</p>
<p>$$<br>x_{123}^{1234}<br>$$</p>
<h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\frac</span>&#123;x+y&#125;&#123;2&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\frac</span>&#123;1&#125;&#123;1+<span class="keyword">\frac</span>&#123;1&#125;&#123;2&#125;&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\frac{x+y}{2}<br>$$</p>
<p>$$<br>\frac{1}{1+\frac{1}{2}}<br>$$</p>
<h2 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\sqrt</span>&#123;2&#125;&lt;<span class="keyword">\sqrt</span>[3]&#123;3&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\sqrt</span>&#123;1+<span class="keyword">\sqrt</span>[p]&#123;1+a<span class="built_in">^</span>2&#125;&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\sqrt{2}&lt;\sqrt[3]{3}<br>$$</p>
<p>$$<br>\sqrt{1+\sqrt[p]{1+a^2}}<br>$$</p>
<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\sum</span><span class="built_in">_</span>&#123;k=1&#125;<span class="built_in">^</span>&#123;n&#125;<span class="keyword">\frac</span>&#123;1&#125;&#123;k&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\sum_{k&#x3D;1}^{n}\frac{1}{k}<br>$$</p>
<h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\int</span><span class="built_in">_</span>a<span class="built_in">^</span>b f(x)dx<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\int_a^b f(x)dx<br>$$</p>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\begin</span>&#123;bmatrix&#125;1 <span class="built_in">&amp;</span> 2<span class="keyword">\\</span><span class="keyword">\\</span>3 <span class="built_in">&amp;</span>4<span class="keyword">\end</span>&#123;bmatrix&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{bmatrix}1 &amp; 2\\3 &amp;4\end{bmatrix}<br>$$</p>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p>$$<br>\begin{array}{|c|c|c|c|c|c|c|c|}<br>\hline<br>{\alpha} &amp; {\backslash alpha} &amp; {\theta} &amp; {\backslash theta} &amp; {o} &amp; {o} &amp; {\upsilon} &amp; {\backslash upsilon} \\<br>\hline<br>{\beta} &amp; {\backslash beta} &amp; {\vartheta} &amp; {\backslash vartheta} &amp; {\pi} &amp; {\backslash pi} &amp; {\phi} &amp; {\backslash phi} \\<br>\hline<br>{\gamma} &amp; {\backslash gamma} &amp; {\iota} &amp; {\backslash iota} &amp; {\varpi} &amp; {\backslash varpi} &amp; {\varphi} &amp; {\backslash varphi} \\<br>\hline<br>{\delta} &amp; {\backslash delta} &amp; {\kappa} &amp; {\backslash kappa} &amp; {\rho} &amp; {\backslash rho} &amp; {\chi} &amp; {\backslash chi} \\<br>\hline<br>{\epsilon} &amp; {\backslash epsilon} &amp; {\lambda} &amp; {\backslash lambda} &amp; {\varrho} &amp; {\backslash varrho} &amp; {\psi} &amp; {\backslash psi} \\<br>\hline<br>{\varepsilon} &amp; {\backslash varepsilon} &amp; {\mu} &amp; {\backslash mu} &amp; {\sigma} &amp; {\backslash sigma} &amp; {\omega} &amp; {\backslash omega} \\<br>\hline<br>{\zeta} &amp; {\backslash zeta} &amp; {\nu} &amp; {\backslash nu} &amp; {\varsigma} &amp; {\backslash varsigma} &amp; {} &amp; {} \\<br>\hline<br>{\eta} &amp; {\backslash eta} &amp; {\xi} &amp; {\backslash xi} &amp; {\tau} &amp; {\backslash tau} &amp; {} &amp; {} \\<br>\hline<br>{\Gamma} &amp; {\backslash Gamma} &amp; {\Lambda} &amp; {\backslash Lambda} &amp; {\Sigma} &amp; {\backslash Sigma} &amp; {\Psi} &amp; {\backslash Psi} \\<br>\hline<br>{\Delta} &amp; {\backslash Delta} &amp; {\Xi} &amp; {\backslash Xi} &amp; {\Upsilon} &amp; {\backslash Upsilon} &amp; {\Omega} &amp; {\backslash Omega} \\<br>\hline<br>{\Omega} &amp; {\backslash Omega} &amp; {\Pi} &amp; {\backslash Pi} &amp; {\Phi} &amp; {\backslash Phi} &amp; {} &amp; {} \\<br>\hline<br>\end{array}<br>$$</p>
<h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://juejin.im/post/5a6721bd518825733201c4a2">https://juejin.im/post/5a6721bd518825733201c4a2</a></p>
<p><a href="https://github.com/mk43/BlogResource/blob/master/LaTex/LATEX%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8.pdf">https://github.com/mk43/BlogResource/blob/master/LaTex/LATEX%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8.pdf</a></p>
<p><a href="https://oysz2016.github.io/post/8611e6fb.html">https://oysz2016.github.io/post/8611e6fb.html</a></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python一些语法备忘</title>
    <url>/blog/2020/05/22/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>总结了一些Python的语法</p>
<span id="more"></span>

<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><h3 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1. if else"></a>1. if else</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line">y=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">or</span> y==<span class="string">&#x27;hello&#x27;</span>:</span><br><span class="line">	x=x+<span class="number">1</span></span><br><span class="line">	y=y+<span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-Python特色语句：for-else"><a href="#2-Python特色语句：for-else" class="headerlink" title="2. Python特色语句：for else"></a>2. Python特色语句：for else</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>,<span class="number">81</span>,-<span class="number">1</span>):</span><br><span class="line">	root = sqrt(n)</span><br><span class="line">	<span class="keyword">if</span> root = <span class="built_in">int</span>(root):</span><br><span class="line">		<span class="built_in">print</span>(n)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;didnt find it!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这条else语句对应的是知for，不是if，这个是python特有的语句。 break表示打断最近的loop, 而if不是loop，打断的是for loop， 即在for循环中，如果没有从任何一个break中退出，则会执行和for对应的else 只要从break中退出了，则else部分不执行。<br>这段话如果用C++来实现，则如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">99</span>;i&gt;<span class="number">81</span>;i--) </span><br><span class="line">&#123; </span><br><span class="line">	root=<span class="built_in">sqrt</span>(i); </span><br><span class="line">	<span class="keyword">if</span>(root==<span class="built_in">int</span>(root)) </span><br><span class="line">	&#123; </span><br><span class="line">		std::cout&lt;&lt;i; </span><br><span class="line">		<span class="keyword">break</span>; </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">81</span>) <span class="comment">//边界判断 </span></span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;didn&#x27;t find it!&quot;</span>&lt;&lt;std::endl; </span><br></pre></td></tr></table></figure>
<h3 id="3-Definations"><a href="#3-Definations" class="headerlink" title="3. Definations"></a>3. Definations</h3><p>aList &#x3D; []  列表，相当于c++中的arry&#x2F;vector<br>aDictionary &#x3D; {}  字典, 相当于c++中的map<br>aTuple &#x3D; ()  元组, 只读的，不能修改，不能像list一样有append，remove等操作</p>
<h3 id="4-遍历输出"><a href="#4-遍历输出" class="headerlink" title="4. 遍历输出"></a>4. 遍历输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> aList:</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> aDictionary.item()</span><br><span class="line">	<span class="built_in">print</span>(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Access Value in Dictionary by the Keys</span></span><br><span class="line">value = aDictionary[‘key’]  <span class="comment">#Key muss be string!</span></span><br></pre></td></tr></table></figure>
<h3 id="5-args-kwargs"><a href="#5-args-kwargs" class="headerlink" title="5. *args, **kwargs"></a>5. <code>*args</code>, <code>**kwargs</code></h3><p><code>*args</code>是位置参数，<code>**kwargs</code>是关建字参数。<code>*args</code>用来收集各种参数，其名字没有实际出现在函数签名的括号中， <code>**kwargs</code>代表了各个dictionary等关系，其名字没有实际出现在括号中，所以有了这两个东西可以在函数input括号里输入各种不同的参数而不止局限于几个自己命名的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_kwargs</span>(<span class="params">first, *args, **kwargs</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;required argument&#x27;</span>, first)</span><br><span class="line">	<span class="keyword">for</span> v <span class="keyword">in</span> args:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;optional argument (*args):&#x27;</span>, v)</span><br><span class="line">	<span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.item():</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;optional argument %s (*kwargs): %s&#x27;</span>, %(k,v))</span><br><span class="line"></span><br><span class="line">test_kwargs(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,k1=<span class="number">5</span>,k2=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#required argument: 1</span></span><br><span class="line"><span class="comment">#optional argument (*args): 2</span></span><br><span class="line"><span class="comment">#optional argument (*args): 3</span></span><br><span class="line"><span class="comment">#optional argument (*args): 4</span></span><br><span class="line"><span class="comment">#optional argument k2 (*kwargs): 6</span></span><br><span class="line"><span class="comment">#optional argument k1 (*kwargs): 5</span></span><br></pre></td></tr></table></figure>
<h3 id="6-装饰器"><a href="#6-装饰器" class="headerlink" title="6. 装饰器"></a>6. 装饰器</h3><p>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数&#x2F;类对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decarator</span>(<span class="params">func</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args</span>):</span><br><span class="line">		<span class="comment">#可以此处添加功能如</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;add funtion 1&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> func(*args)</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decarator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;i have&#x27;</span>, *args)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;dsds&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#add funtion 1</span></span><br><span class="line"><span class="comment">#i have dsds 3 abc</span></span><br></pre></td></tr></table></figure>
<h3 id="7-列表推导式"><a href="#7-列表推导式" class="headerlink" title="7. 列表推导式"></a>7. 列表推导式</h3><p>基本语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_list = [expression(i) <span class="keyword">for</span> i <span class="keyword">in</span> old_list <span class="keyword">if</span> condition(i)]</span><br></pre></td></tr></table></figure>
<p>翻译成for循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> old_list:</span><br><span class="line">	<span class="keyword">if</span>(condition):</span><br><span class="line">		new_list.append(expression(i))</span><br></pre></td></tr></table></figure>
<h3 id="8-类"><a href="#8-类" class="headerlink" title="8. 类"></a>8. 类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">		self.name_ = name</span><br><span class="line">		self.age_ = age</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(self.name_)</span><br><span class="line">		<span class="keyword">return</span> self.name_</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">getAge</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(self.age_)</span><br><span class="line">		<span class="keyword">return</span> self.age_</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">rename</span>(<span class="params">self, new_name</span>):</span><br><span class="line">		self.name_ = new_name</span><br><span class="line">		<span class="keyword">return</span> self.name_</span><br><span class="line"></span><br><span class="line">p = person(<span class="string">&#x27;tom&#x27;</span>,<span class="number">34</span>)</span><br><span class="line">p.getName()</span><br><span class="line">p.rename(<span class="string">&#x27;alex&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>•<code>__init__()</code>被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法，相当于构造函数，一定要有self<br>•self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数, 这里于c++不同，空括号函数不能直接空着，而是要在定义时加入self<br>•self.name_ 加下滑线表示属性私有<br>•方法函数前面如果加个装饰器@property， 则调用时候直接调用函数名，不用加括号。例如直接调用p.getAge 不用加括号后面<br>•继承语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">	<span class="keyword">pass</span>  <span class="comment">#pass啥都不做，就是占个位</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit二次开发</title>
    <url>/blog/2020/06/12/Revit%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><ul>
<li>Visual Studio 2019, .Net桌面开发</li>
<li>Revit 2019</li>
<li>Revit 2019 SDK(software development kit) : 在Add-In Manager文档内修改配置文件Autodesk.AddInManager.addin，在[TARGET]中写入文件当前路径。复制配置文件C:\ProgramData\Autodesk\Revit\Addins\2019。写入的配置文件出现在revit-附加模块-外部工具中。</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ol>
<li><p>VS中新建.Net frameworkl Class Libraray(类库) 项目</p>
</li>
<li><p>在reference里面添加新的引用，浏览到revit安装目录下，添加RevitAPI.dll和RevitAPIUI.dll<strong>（dll类库文件，不能直接执行，需要被调用）</strong></p>
</li>
<li><p>选中两个dll去到属性里面把复制本地copy local改成false</p>
</li>
<li><p>代码</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloRevit</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TaskDialog.Show(<span class="string">&quot;Window&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build - Build solution; Output中可查看生成的dll路径, 将其复制</p>
</li>
<li><p>打开revit，选择addin-manager,load中输入路径载入dll文件，选择run后即可加载运行。</p>
</li>
</ol>
<h2 id="C-的一些基础"><a href="#C-的一些基础" class="headerlink" title="C#的一些基础"></a>C#的一些基础</h2><p>驼峰命名法：首字母小写，后面单词首字母大写</p>
<p>帕斯卡命名法：首字母大写，后面单词首字母也大写</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleAppTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//静态函数不用创建对象也可以直接调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">GetPrice</span>(<span class="params"><span class="built_in">int</span> cout1, <span class="built_in">float</span> singelPrice1, <span class="built_in">int</span> cout2, <span class="built_in">float</span> singelPrice2</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">float</span> totalPrice = cout1 * singelPrice1 + cout2 * singelPrice2;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;this is:&quot;</span>+ totalPrice);<span class="comment">//输出语法</span></span><br><span class="line">            <span class="keyword">return</span> totalPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GetPrice(<span class="number">2</span>, <span class="number">2.5f</span>, <span class="number">4</span>, <span class="number">3.5f</span>);<span class="comment">//小数编译器默认double双精度类型，float要在数字后加f</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for-if-else-switch-foreach-while"><a href="#for-if-else-switch-foreach-while" class="headerlink" title="for,if else, switch, foreach,while"></a>for,if else, switch, foreach,while</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for,if else, switch, foreach,while</span></span><br><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> List&lt;Student&gt;()&#123;student1, student2&#125;;</span><br><span class="line"><span class="comment">//for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i =<span class="number">0</span>; i&lt;students.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    students[i].Greeting();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foreach</span></span><br><span class="line"><span class="keyword">foreach</span> (Student i <span class="keyword">in</span> students)</span><br><span class="line">&#123;</span><br><span class="line">    i.Greeting();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//switch</span></span><br><span class="line"><span class="keyword">switch</span>(student1.Gender)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> Gender.Female:</span><br><span class="line">    	student1.Greeting();</span><br><span class="line">    	<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Gender.Male:</span><br><span class="line">        .....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//while</span></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    student1.Greeting();</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类-属性，static-字段，方法，构造函数，枚举类型"><a href="#类-属性，static-字段，方法，构造函数，枚举类型" class="headerlink" title="类,属性，static,字段，方法，构造函数，枚举类型"></a>类,属性，static,字段，方法，构造函数，枚举类型</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleAppTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Human</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Human</span>(<span class="params">String name, Gender gender, <span class="built_in">int</span> age</span>) <span class="comment">//构造函数,不写的话会自动构建空的默认构造函数</span></span></span><br><span class="line">            &#123;</span><br><span class="line">                Name = name;</span><br><span class="line">                Gender = gender;</span><br><span class="line">                Age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> Population = <span class="number">700000000000</span>; <span class="comment">//静态字段可以通过类名直接调用，而不用跟非静态字段一样实例化类;方法也同理，如果方法是修饰整个类的，那么就加static</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> age; <span class="comment">//字段</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age <span class="comment">//属性Property,相当于字段的升级版，可以对字段进行一些控制</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125; <span class="comment">//get 访问器获取age</span></span><br><span class="line">                <span class="keyword">set</span>                 <span class="comment">//set 访问器控制字段age,age如果小于0,则输出19</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        age = <span class="number">19</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        age = <span class="keyword">value</span>;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//属性，不加get,set就是字段，但此处set没做修改，写成字段方式效果一样</span></span><br><span class="line">            <span class="keyword">public</span> Gender Gender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//属性 // 枚举类型定义在class外</span></span><br><span class="line">           </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Greeting</span>() <span class="comment">//方法</span></span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> words = <span class="built_in">string</span>.Format(<span class="string">&quot;hello, my name is &#123;0&#125;, I am &#123;1&#125; years old, I am a &#123;2&#125;&quot;</span>, Name, Age, Gender); <span class="comment">//string的一种替换转换</span></span><br><span class="line">                <span class="built_in">string</span> words1 = <span class="string">$&quot;hello, my name is <span class="subst">&#123;Name&#125;</span>, I am <span class="subst">&#123;Age&#125;</span> years old, I am a <span class="subst">&#123;Gender&#125;</span>&quot;</span>; <span class="comment">// 简便写法，效果同上</span></span><br><span class="line">                Console.WriteLine(words);</span><br><span class="line">                Console.WriteLine(words1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">enum</span> Gender &#123; Male, Female &#125; <span class="comment">//枚举类型定义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Human</span> <span class="comment">//继承</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, Gender gender, <span class="built_in">int</span> age</span>) : <span class="title">base</span>(<span class="params">name, gender, age</span>) <span class="comment">//母类有构造函数时候派生类也需要有相应的</span></span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Human person1 = <span class="keyword">new</span> Human(<span class="string">&quot;Tom&quot;</span>,Gender.Male,<span class="number">17</span>); <span class="comment">//有构造函数后这个括号不能空白,枚举类型的调用方法；实例化</span></span><br><span class="line">            person1.Age = <span class="number">27</span>;</span><br><span class="line">            person1.Greeting();</span><br><span class="line">            Console.WriteLine(Human.Population);</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(<span class="string">&quot;jack&quot;</span>, Gender.Male, <span class="number">20</span>);</span><br><span class="line">            student.Greeting();</span><br><span class="line">            Console.WriteLine(Student.Population);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组，list"><a href="#数组，list" class="headerlink" title="数组，list"></a>数组，list</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组,容量不能变相当于arry</span></span><br><span class="line"><span class="built_in">int</span>[] numbers = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];<span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">int</span>[] numbers = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> number = number[<span class="number">0</span>] <span class="comment">//访问</span></span><br><span class="line"><span class="comment">//list，相当于vector，容量可变</span></span><br><span class="line">List&lt;<span class="built_in">double</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="built_in">double</span>&gt;();</span><br><span class="line">nums.Add(<span class="number">1.2</span>)<span class="comment">//添加元素</span></span><br><span class="line">nums.Count <span class="comment">//返回list元素个数</span></span><br><span class="line"><span class="built_in">double</span> num = nums[<span class="number">1</span>]<span class="comment">//访问</span></span><br></pre></td></tr></table></figure>

<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//interface接口</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Autodesk.Revit.UI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IExternalCommand</span> <span class="comment">//Interface命名必须I开头，接口只做声明，定义实现要class来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloRevit</span> : <span class="title">IExternalCommand</span> <span class="comment">//class实现interface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)<span class="comment">//格式</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            TaskDialog.Show(<span class="string">&quot;Window&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>);<span class="comment">//具体方法内部如何实现自己发挥随意</span></span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VS内的一些概念"><a href="#VS内的一些概念" class="headerlink" title="VS内的一些概念"></a>VS内的一些概念</h2><ul>
<li>解决方案Solution.sln: 一个完整的软件或插件对应一个解决方案</li>
<li>项目Project: 一个解决方案下可以添加多个项目，可以单独编译生成</li>
<li>程序集Assemblies：项目编译生成的结果文件，如.exe或者.dll的类库文件被称为程序集</li>
<li>同一个解决方案下的项目可以相互引用</li>
</ul>
<h2 id="WinForm和WPF制作用户界面UI"><a href="#WinForm和WPF制作用户界面UI" class="headerlink" title="WinForm和WPF制作用户界面UI"></a>WinForm和WPF制作用户界面UI</h2><ul>
<li><p>Winform: 新建一个Windows Forms App (.Net framework); WPF:新建一个WPF APP(.Net framework)，可在左边工具箱里托拽按钮</p>
</li>
<li><p>WPF使用XAML语言设计界面，使其相比winform更加灵活，但注意要在引用中添加system.xaml，才不会报错</p>
</li>
<li><p>ADD菜单里面没有WPF窗口选项怎么办：在对应的项目文件.csproj中的第一个PropertyGroup中添加代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ProjectTypeGuids&gt;&#123;60dc8134-eba5-43b8-bcc9-bb4bc16c2548&#125;;&#123;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&#125;&lt;/ProjectTypeGuids&gt;</span><br><span class="line">&lt;WarningLevel&gt;4&lt;/WarningLevel&gt;</span><br><span class="line">&lt;AutoGenerateBindingRedirects&gt;true&lt;/AutoGenerateBindingRedirects&gt;</span><br></pre></td></tr></table></figure>
<p>完事之后还要在项目里添加一个System.xaml的引用</p>
</li>
</ul>
<h3 id="例子：WPF设计login窗口-在开头的Helloword项目中操作"><a href="#例子：WPF设计login窗口-在开头的Helloword项目中操作" class="headerlink" title="例子：WPF设计login窗口, 在开头的Helloword项目中操作"></a>例子：WPF设计login窗口, 在开头的Helloword项目中操作</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;HelloWorld.LoginWindow&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:HelloWorld&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;LoginWindow&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;310&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;310&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span> <span class="comment">&lt;!--给窗口划分轴网，这里开始划分行，有几行就写几行RowDefination--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;1.8*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span> <span class="comment">&lt;!--星号表示等分的行宽的1份，1.8*就是1.8倍的一份--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;0.2*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RowDefinition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;2*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ColumnDefinition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span>1</span><br><span class="line">        <span class="comment">&lt;!--插图，Grid.Row定位在第一行，columSpan表示图片跨度为3列，Aligment分别为水平垂直居中，路径中前面的pack://aplication:,,,/HelloWorld;代表程序集，后面的component/Ressource/sb_seeaoo.jpg代表图片在程序集中所处的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Grid.ColumnSpan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Source</span>=<span class="string">&quot;pack://aplication:,,,/HelloWorld;component/Ressource/sb_seeaoo.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Image</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Textbox是做一个给用户打字的框，x:Name是给它命名，后面Grid同理定位--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;23&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Textblock是显示一行字，这里是Username，Grid同理定位--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> &gt;</span>Username<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--passwordbox是做一个给用户打字的框，跟Textbox不同用户输入后显示星号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PasswordBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;23&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;0&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> &gt;</span>Password<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--放置一个按钮叫做confirm,Click表示点击触发事件，事件的代码要写在.xaml.cs逻辑代码（下面）里面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;2&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;2&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;40&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;25&quot;</span> <span class="attr">x:Name</span>=<span class="string">&quot;btnLogin&quot;</span> <span class="attr">Click</span>=<span class="string">&quot;btnLogin_Click&quot;</span>&gt;</span>Confirm<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑代码</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for LoginWindow.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">LoginWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LoginWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnLogin_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Username.Text == <span class="string">&quot;admin&quot;</span> &amp;&amp; Password.Password == <span class="string">&quot;12345&quot;</span>)<span class="comment">//如果输入用户密码是12345,就显示succed</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;succed!&quot;</span>);</span><br><span class="line">                DialogResult = <span class="literal">true</span>; <span class="comment">//关闭窗口</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;Wrong username or passwort, please try again&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//helloword.cs中</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloRevit</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123; </span><br><span class="line">            LoginWindow loginwindow = <span class="keyword">new</span> LoginWindow(); <span class="comment">//实例化loginwindow,来源:逻辑代码</span></span><br><span class="line">            loginwindow.ShowDialog(); <span class="comment">//调用其继承自window的显示窗口的方法</span></span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成解决方案后，复制dll路径，revit加载后即可显示登录框</p>
<h2 id="Revit信息获取-Element"><a href="#Revit信息获取-Element" class="headerlink" title="Revit信息获取 - Element"></a>Revit信息获取 - Element</h2><ol>
<li>得到信息载体: Element; 目录可在revitSDK文件夹下查询revitAPI.chm帮助文档</li>
<li>读取信息</li>
</ol>
<p>获取元素的方法：1.直接获取 2.通过ID获取 3.过滤器</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1592141316/12313_nxrxuh.png"></p>
<p>族实例下的元素都是标准族和可载入族生成的模型，而宿主对象下的是由系统族生成的。</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1592660795/3424234_ux1hh3.png"></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成的dll文件，通过revit中直接点击，把元素加入选择集</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI.Selection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SelectionDemo</span> : <span class="title">IExternalCommand</span> <span class="comment">//实现的接口跟helloWorld一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>) <span class="comment">//输入的commandData 里面包含了所有需要的信息</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> </span><br><span class="line">            &#123;</span><br><span class="line">                WallSelectionFilter wallfilter = <span class="keyword">new</span> WallSelectionFilter(); <span class="comment">//实例化wallselectionfilter</span></span><br><span class="line">                UIDocument uiDoc = commandData.Application.ActiveUIDocument; <span class="comment">//先通过commandData获取一个UIDocument</span></span><br><span class="line">                Document Doc = uiDoc.Document;<span class="comment">// 通过uiDoc获得文档，即当前打开的revit文件</span></span><br><span class="line">                Reference r = uiDoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, wallfilter); <span class="comment">//pickobject方法有重载允许输入ISelectionFilter类型</span></span><br><span class="line">                Element element = Doc.GetElement(r.ElementId);</span><br><span class="line">                Wall wall = element <span class="keyword">as</span> Wall;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(Autodesk.Revit.Exceptions.OperationCanceledException e) <span class="comment">//捕捉异常，不让其抛出显示窗口</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WallSelectionFilter</span> : <span class="title">ISelectionFilter</span> <span class="comment">//实现过滤器接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">AllowElement</span>(<span class="params">Element elem</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (elem.Category.Id.IntegerValue == (<span class="built_in">int</span>)BuiltInCategory.OST_Walls)<span class="comment">//如果选中的element的ID跟墙类型ID一致，即真。墙过滤器</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">AllowReference</span>(<span class="params">Reference reference, XYZ position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过ID获取（选定）元素（墙）</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI.Selection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SelectionDemo</span> : <span class="title">IExternalCommand</span> <span class="comment">//实现的接口跟helloWorld一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>) <span class="comment">//输入的commandData 里面包含了所有需要的信息</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> </span><br><span class="line">            &#123;</span><br><span class="line">                WallSelectionFilter wallfilter = <span class="keyword">new</span> WallSelectionFilter(); <span class="comment">//实例化wallselectionfilter</span></span><br><span class="line">                UIDocument uiDoc = commandData.Application.ActiveUIDocument; <span class="comment">//先通过commandData获取一个UIDocument</span></span><br><span class="line">                Document Doc = uiDoc.Document;<span class="comment">// 通过uiDoc获得文档，即当前打开的revit文件</span></span><br><span class="line">                uiDoc.Selection.SetElementIds(<span class="keyword">new</span> List&lt;ElementId&gt;&#123;<span class="keyword">new</span> ElementId(<span class="number">42875</span>)&#125;);<span class="comment">//把已知的elementId加入选择集</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(Autodesk.Revit.Exceptions.OperationCanceledException e) <span class="comment">//捕捉异常，不让其抛出显示窗口</span></span><br><span class="line">            &#123;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;tip&quot;</span>, <span class="string">&quot;please select&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WallSelectionFilter</span> : <span class="title">ISelectionFilter</span> <span class="comment">//实现一种过滤器接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">AllowElement</span>(<span class="params">Element elem</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (elem.Category.Id.IntegerValue == (<span class="built_in">int</span>)BuiltInCategory.OST_Walls)<span class="comment">//如果选中的element的ID跟墙类型ID一致，即真。墙过滤器，效果是鼠标只能选墙，其他不能选</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">AllowReference</span>(<span class="params">Reference reference, XYZ position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤器FilteredElementCollector"><a href="#过滤器FilteredElementCollector" class="headerlink" title="过滤器FilteredElementCollector"></a>过滤器FilteredElementCollector</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过过滤器FilteredElementCollector类，提取项目中的门元素，从而知道其数量</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>] <span class="comment">//事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterElement</span> : <span class="title">IExternalCommand</span> <span class="comment">//这个接口是外部运行需要的</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1.获取对象文件</span></span><br><span class="line">            Document Doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="keyword">var</span> collector = <span class="keyword">new</span> FilteredElementCollector(Doc); <span class="comment">//var关键字自动识别参数类型，返回的是一个过滤器类型</span></span><br><span class="line">            <span class="comment">//这里为什么过滤两次是因为第一次过滤出来的category门类别中包含有门的族实例(FamilyInstance)和门的族模型（familySymbol）,我们想要是门的实例</span></span><br><span class="line">            collector.OfCategory(BuiltInCategory.OST_Doors).OfClass(<span class="keyword">typeof</span>(FamilyInstance));<span class="comment">//两个of并列关系联合的过滤条件；前面过滤出门的族类别，后面过滤出只有famliyinstance类别（即族实例）的过滤器</span></span><br><span class="line">           <span class="comment">//下面四行合起来跟上面一行效果一样，上面ofclass和ofcategory方法是下面wherepasses方法的快捷方式</span></span><br><span class="line">            <span class="keyword">var</span> instanceFilter = <span class="keyword">new</span> ElementClassFilter(<span class="keyword">typeof</span>(FamilyInstance));</span><br><span class="line">            <span class="keyword">var</span> categoryFilter = <span class="keyword">new</span> ElementCategoryFilter(BuiltInCategory.OST_Doors);</span><br><span class="line">            <span class="keyword">var</span> doorInstacefilter = <span class="keyword">new</span> LogicalAndFilter(instanceFilter, categoryFilter);</span><br><span class="line">            collector.WherePasses(doorInstacefilter);</span><br><span class="line">            <span class="comment">//除了上述logicalfilter之外，还有quickfilter 和slowfilter，前者需要输入的参数少，后者要把模型的全部参数拿来在内存中比对过滤</span></span><br><span class="line">            <span class="comment">//2.遍历方式提取元素</span></span><br><span class="line">            <span class="comment">//toelements方法从过滤其中提取元素，返回的是element类型的列表</span></span><br><span class="line">            <span class="keyword">var</span> elementList = collector.ToElements().Cast&lt;FamilyInstance&gt;(); <span class="comment">//cast强制转换列表类型把由element类型转换为familyinstance类型，所以这里返回的是familyinstance类型的列表</span></span><br><span class="line">            <span class="comment">// 另一种方法遍历提取：FilteredElementCollector类实现的是IEnumerable接口，凡是实现这个接口的都可以用foreach遍历输出</span></span><br><span class="line">            <span class="keyword">var</span> elementList1 = <span class="keyword">new</span> List&lt;Element&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (Element item <span class="keyword">in</span> collector)</span><br><span class="line">            &#123;</span><br><span class="line">                elementList1.Add(item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.获取结果对象，可通过linq进行进一步筛选</span></span><br><span class="line">            <span class="comment">//对过滤后的元素进行进一步的查询：Linq(语言集成查询)类似于sql??</span></span><br><span class="line">            <span class="keyword">var</span> selectedDoors = <span class="keyword">from</span> elem <span class="keyword">in</span> collector <span class="keyword">where</span> elem.Name == <span class="string">&quot;Entrance door&quot;</span> <span class="keyword">select</span> elem;</span><br><span class="line">            TaskDialog.Show(<span class="string">&quot;提示&quot;</span>,<span class="string">$&quot;名字叫做Entrance door的门的族实例有<span class="subst">&#123;selectedDoors.Count()&#125;</span>个&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br></pre></td></tr></table></figure>

<h2 id="元素几何信息获取"><a href="#元素几何信息获取" class="headerlink" title="元素几何信息获取"></a>元素几何信息获取</h2><h3 id="获取element位置"><a href="#获取element位置" class="headerlink" title="获取element位置"></a>获取element位置</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取选定墙的位置以及长度</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI.Selection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SelectionDemo</span> : <span class="title">IExternalCommand</span> <span class="comment">//实现的接口跟helloWorld一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>) <span class="comment">//输入的commandData 里面包含了所有需要的信息</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> </span><br><span class="line">            &#123;</span><br><span class="line">                WallSelectionFilter wallfilter = <span class="keyword">new</span> WallSelectionFilter(); <span class="comment">//实例化wallselectionfilter</span></span><br><span class="line">                UIDocument uiDoc = commandData.Application.ActiveUIDocument; <span class="comment">//先通过commandData获取一个UIDocument</span></span><br><span class="line">                Document Doc = uiDoc.Document;<span class="comment">// 通过uiDoc获得文档，即当前打开的revit文件</span></span><br><span class="line">                Reference r = uiDoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element, wallfilter); <span class="comment">//pickobject方法有重载允许输入ISelectionFilter类型</span></span><br><span class="line">                Element element = Doc.GetElement(r.ElementId);</span><br><span class="line">                Wall wall = element <span class="keyword">as</span> Wall;</span><br><span class="line">                <span class="keyword">var</span> location = wall.Location <span class="keyword">as</span> LocationCurve;</span><br><span class="line">                <span class="keyword">var</span> curve = location.Curve;</span><br><span class="line">                <span class="keyword">var</span> start = curve.GetEndPoint(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">var</span> end = curve.GetEndPoint(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">var</span> length1 = curve.Length;<span class="comment">//注意默认长度单位是英尺feet,所以需要转换</span></span><br><span class="line">                <span class="keyword">var</span> length = UnitUtils.ConvertFromInternalUnits(length1, DisplayUnitType.DUT_MILLIMETERS); <span class="comment">//用unitutils类下面的转化方法</span></span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;tip&quot;</span>, <span class="string">$&quot;选择墙的起点是<span class="subst">&#123;start.ToString()&#125;</span>\n终点是<span class="subst">&#123;end.ToString()&#125;</span>\n长度是<span class="subst">&#123;length&#125;</span>mm&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(Autodesk.Revit.Exceptions.OperationCanceledException e) <span class="comment">//捕捉异常，不让其抛出显示窗口</span></span><br><span class="line">            &#123;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;tip&quot;</span>, <span class="string">&quot;please select&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WallSelectionFilter</span> : <span class="title">ISelectionFilter</span> <span class="comment">//实现过滤器接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">AllowElement</span>(<span class="params">Element elem</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (elem.Category.Id.IntegerValue == (<span class="built_in">int</span>)BuiltInCategory.OST_Walls)<span class="comment">//如果选中的element的ID跟墙类型ID一致，即真。墙过滤器</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">AllowReference</span>(<span class="params">Reference reference, XYZ position</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取选定窗的位置</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI.Selection;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SelectionDemo</span> : <span class="title">IExternalCommand</span> <span class="comment">//实现的接口跟helloWorld一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>) <span class="comment">//输入的commandData 里面包含了所有需要的信息</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> </span><br><span class="line">            &#123;</span><br><span class="line">                UIDocument uiDoc = commandData.Application.ActiveUIDocument; <span class="comment">//先通过commandData获取一个UIDocument</span></span><br><span class="line">                Document Doc = uiDoc.Document;<span class="comment">// 通过uiDoc获得文档，即当前打开的revit文件</span></span><br><span class="line">                Reference r = uiDoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element); <span class="comment">//pickobject方法有重载允许输入ISelectionFilter类型</span></span><br><span class="line">                Element element = Doc.GetElement(r.ElementId);</span><br><span class="line">                <span class="keyword">var</span> window = element <span class="keyword">as</span> FamilyInstance;</span><br><span class="line">                <span class="keyword">var</span> location = wall.Location <span class="keyword">as</span> LocationPoint;</span><br><span class="line">                <span class="keyword">var</span> point = location.Point;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;tip&quot;</span>, <span class="string">$&quot;选择窗的位置是<span class="subst">&#123;point.ToString()&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(Autodesk.Revit.Exceptions.OperationCanceledException e) <span class="comment">//捕捉异常，不让其抛出显示窗口</span></span><br><span class="line">            &#123;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;tip&quot;</span>, <span class="string">&quot;please select&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取几何空间信息"><a href="#获取几何空间信息" class="headerlink" title="获取几何空间信息"></a>获取几何空间信息</h3><p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1592168099/41123PNG_m2nrtg.png"></p>
<h4 id="GeometryElement-Class"><a href="#GeometryElement-Class" class="headerlink" title="GeometryElement Class"></a>GeometryElement Class</h4><p>This class contains geometric primitives that are generated from the parametric  description of the element. The member geometric primitives can be obtained  directly from this object using the capabilities of IEnumerable. 此类包含根据元素的参数描述生成的几何图元。 几何数据可以通过实现IEnumerable的接口的方法获取。是几何体的集合，可以通过枚举器把其包含的几何实体都枚举出来。<em>墙，楼板，MEP？</em></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GeometryElement</span> : <span class="title">GeometryObject</span>, </span><br><span class="line">	<span class="title">IEnumerable</span>&lt;<span class="title">GeometryObject</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="GeometryInstance-Class"><a href="#GeometryInstance-Class" class="headerlink" title="GeometryInstance Class"></a>GeometryInstance Class</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GeometryInstance</span> : <span class="title">GeometryObject</span></span><br></pre></td></tr></table></figure>

<p>A GeometryInstance represents a set of geometry stored by Revit in a default  configuration, and then transformed into the proper location as a result of the  properties of the element. The most common situation where GeometryInstances are  encountered is in Family instances. Revit uses GeometryInstances to allow it to  store a single copy of the geometry for a given family and reuse it in multiple  instances. Note that not all Family instances will include GeometryInstances.  When Revit needs to make a unique copy of the family geometry for a given  instance (because of the effect of local joins, intersections, and other factors  related to the instance placement) no GeometryInstance will be encountered;  instead the Solid geometry will be found at the top level of the hierarchy. A  GeometryInstance offers the ability to read its geometry through the  GetSymbolGeometry() and GetInstanceGeometry() methods. These methods return  another Autodesk.Revit.DB.GeometryElement which can be parsed just like the  first level return. </p>
<p>GeometryInstance表示实例化后的几何数据，并且多个族实例公用一份GeometryInstance。一般一个构件由GeometryInstance，它里面的SymbolGeometry包含了solid几何实体。但是请注意，并非所有Family实例都将包含GeometryInstances（GeometryInstances里面都有值，非空）。当两个构件相交的时候，就将不会有GeometryInstance，它是空的，而是直接由solid几何实体表示。</p>
<p>GeometryInstance提供了通过GetSymbolGeometry（）和GetInstanceGeometry（）方法读取其几何的信息。这些方法返回另一个Autodesk.Revit.DB.GeometryElement，可以像第一级返回一样对其进行解析。<em>窗，柱，梁？</em></p>
<p><strong>小结：系统族生成的模型，通过GeometryElement获取几何信息，标准族生成的模型用GeometryInstance。下图族实例下的元素都是标准族和可载入族生成的模型，而宿主对象下的是由系统族生成的。</strong></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1592141316/12313_nxrxuh.png"></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素的空间信息</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//扩展方法：1.方法所在的类必须是静态的static </span></span><br><span class="line">   <span class="comment">//2.方法函数本身也不需是静态的 </span></span><br><span class="line">   <span class="comment">//3.这个方法的第一个参数必须是想要扩展方法的类，并且前面必须要加this关键字修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">GeometryObjectHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取元素所有的几何实体（solid）</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;element&quot;&gt;</span>选取的元素<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;options&quot;&gt;</span>限制条件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment">//Element类的扩展方法，可选参数options表示获取几何信息的时候，对它进行的一些限制条件。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;GeometryObject&gt; <span class="title">GetGeometryObjects</span>(<span class="params"><span class="keyword">this</span> Element element, Options options = <span class="literal">default</span>(Options</span>))</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> results = <span class="keyword">new</span> List&lt;GeometryObject&gt;(); <span class="comment">//results接收获取的GeometryObjects</span></span><br><span class="line">            options = options ?? <span class="keyword">new</span> Options();<span class="comment">//检查options是否是空值。问好表示如果前面变量为空，执行后面，不为空执行前面</span></span><br><span class="line">            <span class="keyword">var</span> geometry = element.get_Geometry(options);<span class="comment">//获得GeomentryElement,但不是最终目标几何实体solid</span></span><br><span class="line">            RecurseObject(geometry, <span class="keyword">ref</span> results);<span class="comment">//geometry.RecurseObject(ref results);这样调用效果一样，所以可以知道声明扩展方法时候那个this后面的只是格式，调用的时候传入的参数不包括this参数。同时，这个函数是静态的，所以不用有对象也可以调用</span></span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 递归遍历所有的几何对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;geometryElement&quot;&gt;</span>初始的几何元素<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;geometryObjects&quot;&gt;</span>递归结果<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment">//GeometryElement类的扩展方法，ref关键字表示把这个参数传进来，然后通过函数内的方法改变，最后再传出去</span></span><br><span class="line">        <span class="comment">//递归函数</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecurseObject</span>(<span class="params"><span class="keyword">this</span> GeometryElement geometryElement, <span class="keyword">ref</span> List&lt;GeometryObject&gt; geometryObjects</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (geometryElement == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> enumerator = geometryElement.GetEnumerator();<span class="comment">//返回获得一个迭代器，迭代器相当于数据库的游标,即一个集合中的某个位置,</span></span><br><span class="line">            <span class="keyword">while</span> (enumerator.MoveNext())<span class="comment">//返回真如果游标成功从一个集合中一个元素移到下一个，返回假如果到头了</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> current = enumerator.Current;<span class="comment">//当前元素（geometryobject）</span></span><br><span class="line">                <span class="keyword">switch</span>(current)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//如果是GeometryInstance，这个里面的SymbolGeometry可能包含solid或GeometryElement或GeometryInstance，</span></span><br><span class="line">                    <span class="comment">//如果碰到Instance就再次调用方法自己本身，一致循环直到到达instance时候break出来</span></span><br><span class="line">                    <span class="keyword">case</span> GeometryInstance instance:</span><br><span class="line">                        instance.SymbolGeometry.RecurseObject(<span class="keyword">ref</span> geometryObjects);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//如果是element,就调用方法本身，寻找element下面的solid实体，把结果返回到geometryObjects，否则一致递归循环查找</span></span><br><span class="line">                    <span class="keyword">case</span> GeometryElement element:</span><br><span class="line">                        element.RecurseObject(<span class="keyword">ref</span> geometryObjects);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Solid solid:</span><br><span class="line">                        <span class="keyword">if</span> (solid.Faces.Size == <span class="number">0</span> || solid.Edges.Size == <span class="number">0</span>)</span><br><span class="line">                            <span class="keyword">continue</span>;<span class="comment">//跳过</span></span><br><span class="line">                        <span class="keyword">else</span> geometryObjects.Add(solid);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:<span class="comment">//其他情况</span></span><br><span class="line">                        geometryObjects.Add(current);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="非几何信息获取"><a href="#非几何信息获取" class="headerlink" title="非几何信息获取"></a>非几何信息获取</h2><ol>
<li>通过类的属性和方法获取</li>
<li>Element.get_Parameter()方法获取，获取的参数类型是BuildInParamenter,parameter类型</li>
<li>LookupParamenter(“string参数名”)，获取的是自己在族内定义的参数，返回parameter类型</li>
</ol>
<p>NuGet获取第三方库NPOI，可通过代码操控写入excel文件</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB.Architecture;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> NPOI.HSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Messaging;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GetRoomInfo</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="comment">//见filterelement章节，这里是连写，toelement方法返回一个element元素的列表</span></span><br><span class="line">            <span class="keyword">var</span> collector = <span class="keyword">new</span> FilteredElementCollector(doc).OfClass(<span class="keyword">typeof</span>(SpatialElement)).ToElements();</span><br><span class="line">            <span class="keyword">var</span> roomInfoList = <span class="keyword">new</span> List&lt;List&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">            <span class="keyword">foreach</span>(Room item <span class="keyword">in</span> collector)<span class="comment">//这里collector是元素列表了所以可以遍历枚举</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> name = item.Name;</span><br><span class="line">                <span class="keyword">var</span> area = item.Area;</span><br><span class="line">                <span class="keyword">var</span> levelname = item.Level.Name;</span><br><span class="line">                <span class="keyword">var</span> parameter = item.get_Parameter(BuiltInParameter.ROOM_HEIGHT);</span><br><span class="line">                <span class="keyword">var</span> roomHeight = parameter.AsValueString();</span><br><span class="line">                <span class="keyword">var</span> roomInfo = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; name, area.ToString(), levelname, roomHeight &#125;;</span><br><span class="line">                roomInfoList.Add(roomInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//NPOI建立工作簿,写入Excel</span></span><br><span class="line">            <span class="keyword">var</span> workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">            <span class="keyword">var</span> sheet = workbook.CreateSheet(<span class="string">&quot;房间信息&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> headers = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;name&quot;</span>, <span class="string">&quot;area&quot;</span>, <span class="string">&quot;level_name&quot;</span>, <span class="string">&quot;room_height&quot;</span> &#125;;</span><br><span class="line">            <span class="keyword">var</span> row0 = sheet.CreateRow(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//这个for填入表头</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; headers.Count(); i++) <span class="comment">//两下tab自动写for语法框架,数组的count是方法所以要加（）</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> cell = row0.CreateCell(i);<span class="comment">//第一行里面逐次创建单元格</span></span><br><span class="line">                cell.SetCellValue(headers[i]);<span class="comment">//每个单元格赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; roomInfoList.Count; i++)<span class="comment">//roomInfoList是list，count是属性所以不用加（）</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> row = sheet.CreateRow(i + <span class="number">1</span>);<span class="comment">//每个房间创建一个新行</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; roomInfoList[i].Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> cell = row.CreateCell(j);<span class="comment">//新行里面逐次创建单元格</span></span><br><span class="line">                    cell.SetCellValue(roomInfoList[i][j]);<span class="comment">//单元格逐次赋值一个房间里面的信息</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存文件窗口，需要添加新的引用system.window.form</span></span><br><span class="line">            SaveFileDialog fileDialog = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">            fileDialog.Filter = <span class="string">&quot;(excel文件)|*.xls&quot;</span>;</span><br><span class="line">            fileDialog.FileName = <span class="string">&quot;房间信息统计&quot;</span>;</span><br><span class="line">            <span class="built_in">bool</span> isFileOk = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//匿名委托，如果点击savefildialog中的确定后，isfileok就是true了</span></span><br><span class="line">            fileDialog.FileOk += (s, e) =&gt; &#123; isFileOk = <span class="literal">true</span>; &#125;;</span><br><span class="line">            fileDialog.ShowDialog();</span><br><span class="line">            <span class="keyword">if</span>(isFileOk)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> path = fileDialog.FileName;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> fs = File.OpenWrite(path))</span><br><span class="line">                &#123;</span><br><span class="line">                    workbook.Write(fs);</span><br><span class="line">                    MessageBox.Show(<span class="string">$&quot;文件成功保存到<span class="subst">&#123;path&#125;</span>&quot;</span>, <span class="string">&quot;提示&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事务Transcation：文档修改的基础"><a href="#事务Transcation：文档修改的基础" class="headerlink" title="事务Transcation：文档修改的基础"></a>事务Transcation：文档修改的基础</h2><p>对revit文件的一些修改记录，如撤销，重做。注意修改的含义：如果仅是视图的放大，缩小就不是事物，因为文档没有改变</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">RetrieveInformation</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//中括号表示类的特性是transcation,它的参数是transcationmode是一个枚举值。如果IExternalCommand程序里面不需要事物，那么后面应该填.readonly，如果需要手动控制则要填.manual</span></span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.ReadOnly)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GetRoomInfo</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br></pre></td></tr></table></figure>

<p>Transcation里面不能嵌套更多Transcation，但是可以嵌套subtranscation或transcationgruppe.</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本框架</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]<span class="comment">//这个其实是TransactionAttrubuite,跟下面那个不一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TranscationDemo</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="comment">//创建事务</span></span><br><span class="line">            <span class="keyword">var</span> transcation = <span class="keyword">new</span> Transaction(doc);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//启动事务</span></span><br><span class="line">                transcation.Start(<span class="string">&quot;创建一片墙&quot;</span>);</span><br><span class="line">                <span class="comment">//创建墙体</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//提交事务</span></span><br><span class="line">                transcation.Commit();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(transcation.GetStatus() == TransactionStatus.Started)</span><br><span class="line">                &#123;</span><br><span class="line">                    transcation.RollBack();<span class="comment">//如果开始事务了出错了就回滚</span></span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]<span class="comment">//这个其实是TransactionAttrubuite,跟下面那个不一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TranscationDemo</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="comment">//创建事务可以创建很多事务了？</span></span><br><span class="line">            <span class="keyword">var</span> transcation = <span class="keyword">new</span> Transaction(doc);</span><br><span class="line">            <span class="comment">//创建事务组</span></span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">group</span> = <span class="keyword">new</span> TransactionGroup(doc);</span><br><span class="line">            <span class="keyword">group</span>.Start(<span class="string">&quot;创建很多墙&quot;</span>)；</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//启动事务，这里可以写很多事务了</span></span><br><span class="line">                transcation.Start(<span class="string">&quot;创建一片墙&quot;</span>);</span><br><span class="line">                <span class="comment">//创建墙体</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//提交事务</span></span><br><span class="line">                transcation.Commit();</span><br><span class="line">                <span class="keyword">group</span>.Assimilate();<span class="comment">//同化，把上面组里的所有事物合并提交</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(transcation.GetStatus() == TransactionStatus.Started)</span><br><span class="line">                &#123;</span><br><span class="line">                    transcation.RollBack();<span class="comment">//如果开始事务了出错了就回滚</span></span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="几何元素的创建"><a href="#几何元素的创建" class="headerlink" title="几何元素的创建"></a>几何元素的创建</h2><p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1592660598/312312_wvtipi.png"></p>
<p>一般思路：先到创建对象的名称类下面看有没有对应的create方法，没有的话就到itemfactory里面看看有没有new创建的方法，再没有就到elementtype里面看是不是从其他类复制过来的，最后再到utilitie里面找。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个带门的墙体</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB.Structure;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ElementsCreation</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="keyword">var</span> line = Line.CreateBound(<span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> XYZ(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            <span class="keyword">var</span> levellist = <span class="function"><span class="keyword">from</span> element <span class="keyword">in</span> <span class="keyword">new</span> <span class="title">FilteredElementCollector</span>(<span class="params">doc</span>).<span class="title">OfClass</span>(<span class="params"><span class="keyword">typeof</span>(Level</span>)) <span class="keyword">where</span> element.Name</span> == <span class="string">&quot;标高 1&quot;</span> <span class="keyword">select</span> element;</span><br><span class="line">            <span class="keyword">var</span> level = levellist.FirstOrDefault() <span class="keyword">as</span> Level;</span><br><span class="line">            <span class="comment">//门</span></span><br><span class="line">            <span class="keyword">var</span> doorLocation = line.Evaluate(<span class="number">0.5</span>, <span class="literal">true</span>);<span class="comment">//门的位置</span></span><br><span class="line">            <span class="keyword">var</span> doorId = <span class="keyword">new</span> ElementId(<span class="number">94654</span>); <span class="comment">//门的id</span></span><br><span class="line">            <span class="keyword">var</span> doorSymbol = doc.GetElement(doorId) <span class="keyword">as</span> FamilySymbol;<span class="comment">//获取门的族模型</span></span><br><span class="line">            <span class="keyword">if</span> (!doorSymbol.IsActive) doorSymbol.Activate();<span class="comment">//如果没激活就激活</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> transCreate = <span class="keyword">new</span> Transaction(doc, <span class="string">&quot;创建墙体&quot;</span>);</span><br><span class="line">                transCreate.Start();</span><br><span class="line">                <span class="keyword">var</span> wall = Wall.Create(doc, line, level.Id, <span class="literal">false</span>);</span><br><span class="line">                doc.Create.NewFamilyInstance(doorLocation, doorSymbol, wall, StructuralType.NonStructural);</span><br><span class="line">                transCreate.Commit();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> Result.Failed;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一圈30个带门的墙</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB.Structure;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ElementsCreation</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> levellist = <span class="function"><span class="keyword">from</span> element <span class="keyword">in</span> <span class="keyword">new</span> <span class="title">FilteredElementCollector</span>(<span class="params">doc</span>).<span class="title">OfClass</span>(<span class="params"><span class="keyword">typeof</span>(Level</span>)) <span class="keyword">where</span> element.Name</span> == <span class="string">&quot;标高 1&quot;</span> <span class="keyword">select</span> element;</span><br><span class="line">            <span class="keyword">var</span> level = levellist.FirstOrDefault() <span class="keyword">as</span> Level;</span><br><span class="line">            <span class="comment">//门</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> doorId = <span class="keyword">new</span> ElementId(<span class="number">94654</span>); <span class="comment">//门的id</span></span><br><span class="line">            <span class="keyword">var</span> doorSymbol = doc.GetElement(doorId) <span class="keyword">as</span> FamilySymbol;<span class="comment">//获取门的族模型</span></span><br><span class="line">            <span class="keyword">if</span> (!doorSymbol.IsActive) doorSymbol.Activate();<span class="comment">//如果没激活就激活</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> count = <span class="number">30</span>;</span><br><span class="line">                <span class="keyword">var</span> r1 = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">var</span> r2 = <span class="number">25</span>;</span><br><span class="line">                <span class="keyword">var</span> aphla = <span class="number">2</span> * Math.PI / count;</span><br><span class="line">                <span class="keyword">var</span> transCreate = <span class="keyword">new</span> Transaction(doc, <span class="string">&quot;创建墙体&quot;</span>);</span><br><span class="line">                transCreate.Start();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> line = Line.CreateBound(<span class="keyword">new</span> XYZ(r1*Math.Cos(aphla*i), r1*Math.Sin(aphla*i), <span class="number">0</span>), <span class="keyword">new</span> XYZ(r2 * Math.Cos(aphla * i), r2 * Math.Sin(aphla * i),<span class="number">0</span>));</span><br><span class="line">                    <span class="keyword">var</span> doorLocation = line.Evaluate(<span class="number">0.5</span>, <span class="literal">true</span>);<span class="comment">//门的位置</span></span><br><span class="line">                    <span class="keyword">var</span> wall = Wall.Create(doc, line, level.Id, <span class="literal">false</span>);</span><br><span class="line">                    doc.Create.NewFamilyInstance(doorLocation, doorSymbol, wall, StructuralType.NonStructural);</span><br><span class="line">                    transCreate.Commit();</span><br><span class="line">                    <span class="comment">//逐次显示生成</span></span><br><span class="line">                    doc.Regenerate();</span><br><span class="line">                    <span class="keyword">var</span> uiDoc = commandData.Application.ActiveUIDocument;</span><br><span class="line">                    uiDoc.RefreshActiveView();</span><br><span class="line">                    <span class="comment">//刷新频率100ms?</span></span><br><span class="line">                    Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> Result.Failed;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建不精确的梁然后通过InaccurateFailureProcessor消除revit中的警告</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB.Structure;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ElementsCreation</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> levellist = <span class="function"><span class="keyword">from</span> element <span class="keyword">in</span> <span class="keyword">new</span> <span class="title">FilteredElementCollector</span>(<span class="params">doc</span>).<span class="title">OfClass</span>(<span class="params"><span class="keyword">typeof</span>(Level</span>)) <span class="keyword">where</span> element.Name</span> == <span class="string">&quot;标高 1&quot;</span> <span class="keyword">select</span> element;</span><br><span class="line">            <span class="keyword">var</span> level = levellist.FirstOrDefault() <span class="keyword">as</span> Level;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建了不精确的梁</span></span><br><span class="line">                <span class="keyword">var</span> line = Line.CreateBound(<span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">new</span> XYZ(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0.02</span>));</span><br><span class="line">                <span class="keyword">var</span> familySymbol = doc.GetElement(<span class="keyword">new</span> ElementId(<span class="number">265299</span>)) <span class="keyword">as</span> FamilySymbol;</span><br><span class="line">                <span class="keyword">var</span> trans = <span class="keyword">new</span> Transaction(doc, <span class="string">&quot;创建梁&quot;</span>);</span><br><span class="line">                <span class="comment">//引用下面的去除警报的类</span></span><br><span class="line">                <span class="keyword">var</span> processor = <span class="keyword">new</span> InaccurateFailureProcessor();</span><br><span class="line">                <span class="keyword">var</span> options = trans.GetFailureHandlingOptions();</span><br><span class="line">                options.SetFailuresPreprocessor(processor);</span><br><span class="line">                trans.SetFailureHandlingOptions(options);</span><br><span class="line">                <span class="comment">//开始事务</span></span><br><span class="line">                trans.Start();</span><br><span class="line">                <span class="comment">//防止弹出错误框说symbol not activate</span></span><br><span class="line">                <span class="keyword">if</span> (!familySymbol.IsActive) familySymbol.Activate();</span><br><span class="line">                doc.Create.NewFamilyInstance(line, familySymbol, level, StructuralType.Beam);</span><br><span class="line">                trans.Commit();</span><br><span class="line"></span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;提示&quot;</span>,e.Message);</span><br><span class="line">                <span class="keyword">return</span> Result.Failed;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除警告</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InaccurateFailureProcessor</span> : <span class="title">IFailuresPreprocessor</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> FailureProcessingResult <span class="title">PreprocessFailures</span>(<span class="params">FailuresAccessor failuresAccessor</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> failList = failuresAccessor.GetFailureMessages();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> failList)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> failId = item.GetFailureDefinitionId();</span><br><span class="line">                <span class="keyword">if</span> (failId == BuiltInFailures.InaccurateFailures.InaccurateBeamOrBrace)</span><br><span class="line">                    failuresAccessor.DeleteWarning(item);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> FailureProcessingResult.Continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="几何编程的一些概念问题"><a href="#几何编程的一些概念问题" class="headerlink" title="几何编程的一些概念问题"></a>几何编程的一些概念问题</h2><h3 id="revit中的基础几何元素"><a href="#revit中的基础几何元素" class="headerlink" title="revit中的基础几何元素"></a>revit中的基础几何元素</h3><ol>
<li>点 XYZ class</li>
<li>线 curve - 相关函数：</li>
</ol>
<ul>
<li>偏移：<code>Curve.CreateOffset(double offsetDist, XYZ referenceVector)</code> referenceVector是线的法向量</li>
<li>线与线之间的关系： <code>SetComparisonResult Intersect(Curve curve, out IntersectionRessultArray resultArray)</code> out 代表输出的结果，有 Overlap相交，subset共线，superset重叠，Equal相同，disjoint没有交点</li>
</ul>
<ol start="3">
<li>面face : 由curve Loop组成 <img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1593017057/312412_srodyz.png"></li>
</ol>
<h3 id="Revit中的变换矩阵Transform类：实现平移，旋转等功能，实际上是个4x4的矩阵"><a href="#Revit中的变换矩阵Transform类：实现平移，旋转等功能，实际上是个4x4的矩阵" class="headerlink" title="Revit中的变换矩阵Transform类：实现平移，旋转等功能，实际上是个4x4的矩阵"></a>Revit中的变换矩阵Transform类：实现平移，旋转等功能，实际上是个4x4的矩阵</h3><p>图中乘号左边就是变换矩阵，右边是几何元素的坐标，得到坐标在空间的变换</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1593017260/4423432_vuefoz.png"></p>
<h3 id="获得两个直线的交点以及平移"><a href="#获得两个直线的交点以及平移" class="headerlink" title="获得两个直线的交点以及平移"></a>获得两个直线的交点以及平移</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//获得两个直线的交点以及平移</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GeometryCalculation</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获得两个直线的交点</span></span><br><span class="line">            <span class="keyword">var</span> point1 = <span class="keyword">new</span> XYZ(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point2 = <span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point3 = <span class="keyword">new</span> XYZ(<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> line1 = Line.CreateBound(point1, point2);</span><br><span class="line">            <span class="keyword">var</span> line2 = Line.CreateBound(XYZ.Zero, point3);</span><br><span class="line">            <span class="keyword">var</span> result = line1.Intersect(line2, <span class="keyword">out</span> IntersectionResultArray results);<span class="comment">// out表示传出的参数，不传进</span></span><br><span class="line">            <span class="keyword">if</span>(result == SetComparisonResult.Overlap)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> Intersectionpoint = results.get_Item(<span class="number">0</span>).XYZPoint;</span><br><span class="line">                TaskDialog.Show(<span class="string">&quot;tip&quot;</span>, Intersectionpoint.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建拉伸体"><a href="#创建拉伸体" class="headerlink" title="创建拉伸体"></a>创建拉伸体</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建拉伸体</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GeometryCalculation</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="comment">//创建拉伸体</span></span><br><span class="line">            <span class="keyword">var</span> tol = commandData.Application.Application.ShortCurveTolerance; <span class="comment">//0.68毫米的默认误差</span></span><br><span class="line">            <span class="keyword">var</span> point1 = <span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point2 = <span class="keyword">new</span> XYZ(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point3 = <span class="keyword">new</span> XYZ(<span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point4 = <span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> line1 = Line.CreateBound(point1, point2);</span><br><span class="line">            <span class="keyword">var</span> line2 = Line.CreateBound(point2, point3);</span><br><span class="line">            <span class="keyword">var</span> line3 = Line.CreateBound(point3, point4);</span><br><span class="line">            <span class="keyword">var</span> line4 = Line.CreateBound(point4, point1);</span><br><span class="line">            <span class="keyword">var</span> curveloop = <span class="keyword">new</span> CurveLoop();</span><br><span class="line">            curveloop.Append(line1);</span><br><span class="line">            curveloop.Append(line2);</span><br><span class="line">            curveloop.Append(line3);</span><br><span class="line">            curveloop.Append(line4);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> transform = Transform.CreateTranslation(<span class="keyword">new</span> XYZ(<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>));<span class="comment">//偏移一个向量</span></span><br><span class="line">            curveloop.Transform(transform);</span><br><span class="line">            <span class="keyword">var</span> solid = GeometryCreationUtilities.CreateExtrusionGeometry(<span class="keyword">new</span> List&lt;CurveLoop&gt; &#123; curveloop &#125;, XYZ.BasisZ, <span class="number">10</span>); <span class="comment">//创建solid</span></span><br><span class="line">            <span class="keyword">var</span> transaction = <span class="keyword">new</span> Transaction(doc, <span class="string">&quot;GeometryCreation&quot;</span>); <span class="comment">//创建事务</span></span><br><span class="line">            transaction.Start();</span><br><span class="line">            <span class="comment">//通过这个类创建一个几何体并添加到文件中</span></span><br><span class="line">            <span class="keyword">var</span> shape = DirectShape.CreateElement(doc, <span class="keyword">new</span> ElementId(BuiltInCategory.OST_GenericModel));</span><br><span class="line">            shape.SetShape(<span class="keyword">new</span> GeometryObject[] &#123; solid &#125;);<span class="comment">//设定shape形状，所有的solid,curve都属于GeometryObject类</span></span><br><span class="line">            transaction.Commit();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="给几何元素以及文档存取-读取信息"><a href="#给几何元素以及文档存取-读取信息" class="headerlink" title="给几何元素以及文档存取&#x2F;读取信息"></a>给几何元素以及文档存取&#x2F;读取信息</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给几何元素以及文档存取/读取信息</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB.ExtensibleStorage;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GeometryCalculation</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Guid _schemaGuid = <span class="keyword">new</span> Guid(<span class="string">&quot;A3A45B90-D692-483D-A764-57888A09F40E&quot;</span>); <span class="comment">//guid在tool中获取</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="comment">//创建拉伸体</span></span><br><span class="line">            <span class="keyword">var</span> tol = commandData.Application.Application.ShortCurveTolerance; <span class="comment">//0.68毫米的默认误差</span></span><br><span class="line">            <span class="keyword">var</span> point1 = <span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point2 = <span class="keyword">new</span> XYZ(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point3 = <span class="keyword">new</span> XYZ(<span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> point4 = <span class="keyword">new</span> XYZ(<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> line1 = Line.CreateBound(point1, point2);</span><br><span class="line">            <span class="keyword">var</span> line2 = Line.CreateBound(point2, point3);</span><br><span class="line">            <span class="keyword">var</span> line3 = Line.CreateBound(point3, point4);</span><br><span class="line">            <span class="keyword">var</span> line4 = Line.CreateBound(point4, point1);</span><br><span class="line">            <span class="keyword">var</span> curveloop = <span class="keyword">new</span> CurveLoop();</span><br><span class="line">            curveloop.Append(line1);</span><br><span class="line">            curveloop.Append(line2);</span><br><span class="line">            curveloop.Append(line3);</span><br><span class="line">            curveloop.Append(line4);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> transform = Transform.CreateTranslation(<span class="keyword">new</span> XYZ(<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>));<span class="comment">//偏移一个向量</span></span><br><span class="line">            curveloop.Transform(transform);</span><br><span class="line">            <span class="keyword">var</span> solid = GeometryCreationUtilities.CreateExtrusionGeometry(<span class="keyword">new</span> List&lt;CurveLoop&gt; &#123; curveloop &#125;, XYZ.BasisZ, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">var</span> transaction = <span class="keyword">new</span> Transaction(doc, <span class="string">&quot;GeometryCreation&quot;</span>);</span><br><span class="line">            transaction.Start();</span><br><span class="line">            <span class="comment">//通过这个类创建一个几何体并添加到文件中</span></span><br><span class="line">            <span class="keyword">var</span> shape = DirectShape.CreateElement(doc, <span class="keyword">new</span> ElementId(BuiltInCategory.OST_GenericModel));</span><br><span class="line">            shape.SetShape(<span class="keyword">new</span> GeometryObject[] &#123; solid &#125;);<span class="comment">//所有的solid,curve都属于GeometryObject类</span></span><br><span class="line">            transaction.Commit();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//扩展数据DataStorage,给元素添加额外信息</span></span><br><span class="line">            <span class="comment">//schema 是描述添加信息是什么样子的，例如读取权限，信息类型，信息名字，信息的一些说明等</span></span><br><span class="line">            <span class="comment">// 先查找有没有以及定义好了的schema，没有就创建新的</span></span><br><span class="line">            <span class="keyword">var</span> schema = Schema.Lookup(_schemaGuid);</span><br><span class="line">            <span class="keyword">if</span>(schema == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> schemaBuilder = <span class="keyword">new</span> SchemaBuilder(_schemaGuid);</span><br><span class="line">                schemaBuilder.SetReadAccessLevel(AccessLevel.Public);</span><br><span class="line">                schemaBuilder.SetWriteAccessLevel(AccessLevel.Public);</span><br><span class="line">                schemaBuilder.SetSchemaName(<span class="string">&quot;Document&quot;</span>);</span><br><span class="line">                schemaBuilder.SetDocumentation(<span class="string">&quot;UniqueFlag&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> failedBuilder = schemaBuilder.AddSimpleField(<span class="string">&quot;Name&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">                schema = schemaBuilder.Finish(); <span class="comment">//定义schema数据模式完成，返回一个Schema类型</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> entity = <span class="keyword">new</span> Entity(schema); <span class="comment">//Entity是schema的实例化</span></span><br><span class="line">            <span class="keyword">var</span> name = schema.GetField(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">            entity.Set(name, <span class="string">&quot;自定义数据&quot;</span>);</span><br><span class="line">            shape.SetEntity(entity);<span class="comment">//把自定义数据存到了shape元素上</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把信息存到整个文档中</span></span><br><span class="line">            <span class="keyword">var</span> dataStorageList = <span class="function"><span class="keyword">from</span> element <span class="keyword">in</span> <span class="keyword">new</span> <span class="title">FilteredElementCollector</span>(<span class="params">doc</span>).<span class="title">OfClass</span>(<span class="params"><span class="keyword">typeof</span>(DataStorage</span>)) <span class="keyword">let</span> storage</span> = element <span class="keyword">as</span> DataStorage <span class="keyword">where</span> storage.GetEntitySchemaGuids().Contains(_schemaGuid) <span class="keyword">select</span> storage; <span class="comment">//linq 过滤器筛选出以及创建好了的datastorage</span></span><br><span class="line">            <span class="keyword">var</span> dataStorage = dataStorageList.FirstOrDefault();</span><br><span class="line">            <span class="keyword">if</span>(dataStorage == <span class="literal">null</span>)</span><br><span class="line">                dataStorage = DataStorage.Create(doc);</span><br><span class="line">            dataStorage.SetEntity(entity);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取数据从文档中</span></span><br><span class="line">            <span class="keyword">var</span> dataEntity = dataStorage.GetEntity(schema);</span><br><span class="line">            <span class="keyword">var</span> field = dataEntity.Schema.GetField(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> result = dataEntity.Get&lt;<span class="built_in">string</span>&gt;(field);</span><br><span class="line">            TaskDialog.Show(<span class="string">&quot;Tip&quot;</span>, <span class="string">&quot;Name is&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改信息的方法"><a href="#修改信息的方法" class="headerlink" title="修改信息的方法"></a>修改信息的方法</h2><h3 id="修改位置信息"><a href="#修改位置信息" class="headerlink" title="修改位置信息"></a>修改位置信息</h3><ul>
<li>Location类</li>
<li>Transform类</li>
<li>ElementTransformUtils类</li>
</ul>
<h3 id="修改非几何信息"><a href="#修改非几何信息" class="headerlink" title="修改非几何信息"></a>修改非几何信息</h3><ul>
<li>属性或方法:例如properties里面有set就是可写入的</li>
<li>get_Parameter： 对于parament可以通过isReadOnly来判断是否可以修改</li>
<li>LookupParameter</li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>Delete方法, 传入elemetnId将其对应的元素类型删除</p>
<h3 id="生成视图图纸"><a href="#生成视图图纸" class="headerlink" title="生成视图图纸"></a>生成视图图纸</h3><ol>
<li>创建图纸</li>
<li>添加视图</li>
<li>调整视口</li>
</ol>
<h2 id="开发面生面插件"><a href="#开发面生面插件" class="headerlink" title="开发面生面插件"></a>开发面生面插件</h2><p><strong>思路：拾取面的轮廓线 -&gt; 指定面的类型 -&gt; 生成新的“面”</strong></p>
<h3 id="WPF窗口界面设计"><a href="#WPF窗口界面设计" class="headerlink" title="WPF窗口界面设计"></a>WPF窗口界面设计</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">&quot;ElementCUD.FaceConfig&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:ElementCUD&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Title</span>=<span class="string">&quot;设置参数&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;120&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;280&quot;</span> <span class="attr">ResizeMode</span>=<span class="string">&quot;NoResize&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">&quot;0.3*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Right&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span>&gt;</span>面类型：<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ComboBox</span> <span class="attr">x:Name</span>=<span class="string">&quot;cbWallType&quot;</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;5&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;Binding wallTypes&#125;&quot;</span> <span class="attr">DisplayMemberPath</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">SelectionChanged</span>=<span class="string">&quot;cbWallType_SelectionChanged&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">SelectedIndex</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ComboBox</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Grid.Column</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;1&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;25&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="窗口后面的逻辑代码"><a href="#窗口后面的逻辑代码" class="headerlink" title="窗口后面的逻辑代码"></a>窗口后面的逻辑代码</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Controls;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Documents;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Input;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for FaceConfig.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FaceConfig</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//传出去的值,返回值</span></span><br><span class="line">        <span class="keyword">public</span> WallType SelectedWallType &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment">//传进来的从文档中找到的所有walltype</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FaceConfig</span>(<span class="params">List&lt;WallType&gt; wallTypes</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//把walltype作为数据源赋给combobox</span></span><br><span class="line">            <span class="keyword">var</span> vm = <span class="keyword">new</span> ViewModel();</span><br><span class="line">            wallTypes.ForEach(x =&gt; vm.wallTypes.Add(x));</span><br><span class="line">            DataContext = vm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cbWallType_SelectionChanged</span>(<span class="params"><span class="built_in">object</span> sender, SelectionChangedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> wallType = e.AddedItems?.Count &gt; <span class="number">0</span> ? (e.AddedItems[<span class="number">0</span>] <span class="keyword">as</span> WallType) : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (wallType != <span class="literal">null</span>)</span><br><span class="line">                SelectedWallType = wallType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Button_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (SelectedWallType != <span class="literal">null</span>)</span><br><span class="line">                DialogResult = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;请选择面的类型&quot;</span>);</span><br><span class="line">                DialogResult = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MVVM 框架模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ObservableCollection&lt;WallType&gt; wallTypes &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> ObservableCollection&lt;WallType&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="面生面功能代码"><a href="#面生面功能代码" class="headerlink" title="面生面功能代码"></a>面生面功能代码</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Autodesk.Revit.Attributes;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.DB;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Transaction(TransactionMode.Manual)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">FaceToFace</span> : <span class="title">IExternalCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">Execute</span>(<span class="params">ExternalCommandData commandData, <span class="keyword">ref</span> <span class="built_in">string</span> message, ElementSet elements</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> uiDoc = commandData.Application.ActiveUIDocument;</span><br><span class="line">            <span class="keyword">var</span> doc = commandData.Application.ActiveUIDocument.Document;</span><br><span class="line">            <span class="comment">//要求用户选择一个objekt，返回这个objekt的reference,这里限定了选面</span></span><br><span class="line">            <span class="keyword">var</span> faceReference = uiDoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Face, <span class="string">&quot;拾取面&quot;</span>);</span><br><span class="line">            <span class="comment">//get到这个face对应的墙</span></span><br><span class="line">            <span class="keyword">var</span> wallofFace = doc.GetElement(faceReference) <span class="keyword">as</span> Wall;</span><br><span class="line">            <span class="comment">// get到拾取到的面的本身，这个get方法返回的是geometric object,而我们上面选的也是object reference</span></span><br><span class="line">            <span class="keyword">var</span> face = wallofFace.GetGeometryObjectFromReference(faceReference) <span class="keyword">as</span> Face;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//想要指定一个墙类型，先应该把文档中所有墙类型找出来</span></span><br><span class="line">            <span class="keyword">var</span> wallTypes = <span class="function"><span class="keyword">from</span> element <span class="keyword">in</span> <span class="keyword">new</span> <span class="title">FilteredElementCollector</span>(<span class="params">doc</span>).<span class="title">OfClass</span>(<span class="params"><span class="keyword">typeof</span>(WallType</span>)) <span class="keyword">let</span> type</span> = element <span class="keyword">as</span> WallType <span class="keyword">select</span> type;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> faceConfigWin = <span class="keyword">new</span> FaceConfig(wallTypes.ToList());</span><br><span class="line">            <span class="keyword">var</span> result = faceConfigWin.ShowDialog();</span><br><span class="line">            <span class="keyword">if</span>(result.HasValue&amp;&amp;result.Value)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> tran = <span class="keyword">new</span> Transaction(doc, <span class="string">&quot;创建面&quot;</span>);</span><br><span class="line">                tran.Start();</span><br><span class="line">                <span class="comment">//自己创建一个函数</span></span><br><span class="line">                CreateFace(doc, face, wallofFace, faceConfigWin.SelectedWallType);</span><br><span class="line">                tran.Commit();</span><br><span class="line">                <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Result.Cancelled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateFace</span>(<span class="params">Document doc, Face face, Wall wallofFace, WallType selectedWallType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> profile = <span class="keyword">new</span> List&lt;Curve&gt;();</span><br><span class="line">            <span class="comment">//获取可能的洞口轮廓集成</span></span><br><span class="line">            <span class="keyword">var</span> openingArrays = <span class="keyword">new</span> List&lt;CurveArray&gt;();</span><br><span class="line">            <span class="comment">//获取墙体宽度</span></span><br><span class="line">            <span class="keyword">var</span> width = selectedWallType.Width;</span><br><span class="line">            <span class="comment">//获取墙体和洞口的轮廓线,自创函数，ref传出参数</span></span><br><span class="line">            ExtractFaceOutline(face, width, <span class="keyword">ref</span> profile, <span class="keyword">ref</span> openingArrays);</span><br><span class="line">            <span class="comment">//创建墙面</span></span><br><span class="line">            <span class="keyword">var</span> wall = Wall.Create(doc, profile, selectedWallType.Id, wallofFace.LevelId, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//设置墙从标高0开始起来</span></span><br><span class="line">            wall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET).Set(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> openingArrays)</span><br><span class="line">            &#123;</span><br><span class="line">                doc.Create.NewOpening(wall, item.get_Item(<span class="number">0</span>).GetEndPoint(<span class="number">0</span>), item.get_Item(<span class="number">1</span>).GetEndPoint(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExtractFaceOutline</span>(<span class="params">Face face, <span class="built_in">double</span> width, <span class="keyword">ref</span> List&lt;Curve&gt; profile, <span class="keyword">ref</span> List&lt;CurveArray&gt; openingArrays</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> curveLoops = face.GetEdgesAsCurveLoops();</span><br><span class="line">            <span class="keyword">var</span> normal = (face <span class="keyword">as</span> PlanarFace)?.FaceNormal;</span><br><span class="line">            <span class="keyword">if</span> (normal == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;面生面的功能暂时不支持非平面&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> translation = Transform.CreateTranslation(normal * width / <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> curveloop <span class="keyword">in</span> curveLoops.OrderByDescending(x =&gt; x.GetExactLength()))</span><br><span class="line">            &#123;</span><br><span class="line">                curveloop.Transform(translation);</span><br><span class="line">                <span class="keyword">var</span> array = <span class="keyword">new</span> CurveArray();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> curve <span class="keyword">in</span> curveloop)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                        profile.Add(curve);</span><br><span class="line">                    <span class="keyword">else</span> array.Append(curve);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) openingArrays.Add(array);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="界面编程：UserInterface"><a href="#界面编程：UserInterface" class="headerlink" title="界面编程：UserInterface"></a>界面编程：UserInterface</h2><p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1593801364/2341_g9lrlr.png"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1593801394/1241241_cn0lst.png"></p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1593801397/3213_icwxvd.png"></p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p><strong>接口： IExternalApplication</strong> 包含了两个方法, 在addin-Manager里面用load Application运行</p>
<ul>
<li>OnStartup: 把启动revit时要实现的方法写在这个方法里面</li>
<li>OnShutdown: 把关闭revit时要实现的方法写在这个方法里面</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//制作了RibbonTab,PushButton和ComboBox</span></span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI;</span><br><span class="line"><span class="keyword">using</span> Autodesk.Revit.UI.Events;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Media.Imaging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ElementCUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">RibbonCreation</span> : <span class="title">IExternalApplication</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">OnShutdown</span>(<span class="params">UIControlledApplication application</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">OnStartup</span>(<span class="params">UIControlledApplication application</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> tabName = <span class="string">&quot;菜单&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> panelName = <span class="string">&quot;工具&quot;</span>;</span><br><span class="line">            application.CreateRibbonTab(tabName);</span><br><span class="line">            <span class="keyword">var</span> panel = application.CreateRibbonPanel(tabName, panelName);</span><br><span class="line">            <span class="comment">//获得面生面类程序集的存储位置和完整类名</span></span><br><span class="line">            <span class="keyword">var</span> assemblyType = <span class="keyword">new</span> FaceToFace().GetType();</span><br><span class="line">            <span class="keyword">var</span> location = assemblyType.Assembly.Location;</span><br><span class="line">            <span class="keyword">var</span> className = assemblyType.FullName;</span><br><span class="line">            <span class="comment">//信息存入data从而可以通过点击按钮执行面生面类</span></span><br><span class="line">            <span class="keyword">var</span> pushButtonData = <span class="keyword">new</span> PushButtonData(<span class="string">&quot;tool&quot;</span>, <span class="string">&quot;面生面&quot;</span>, location, className);</span><br><span class="line">            <span class="comment">//按钮图标</span></span><br><span class="line">            <span class="comment">//反射技术，获得现在运行的文件集ElementCUB的路径location，然后找到它的目录Directory</span></span><br><span class="line">            <span class="keyword">var</span> imageSource = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + <span class="string">@&quot;\Image\游览器.png&quot;</span>;</span><br><span class="line">            pushButtonData.LargeImage = <span class="keyword">new</span> BitmapImage(<span class="keyword">new</span> Uri(imageSource));</span><br><span class="line">            <span class="comment">//把pushbutton添加到panel上</span></span><br><span class="line">            <span class="keyword">var</span> pushButton = panel.AddItem(pushButtonData) <span class="keyword">as</span> PushButton;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分隔符</span></span><br><span class="line">            panel.AddSeparator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加另一个功能按钮</span></span><br><span class="line">            <span class="keyword">var</span> assemblyType1 = <span class="keyword">new</span> GeometryCalculation().GetType();</span><br><span class="line">            <span class="keyword">var</span> location1 = assemblyType.Assembly.Location;</span><br><span class="line">            <span class="keyword">var</span> className1 = assemblyType.FullName;</span><br><span class="line">            <span class="comment">//信息存入data从而可以通过点击按钮执行GeometryCalculation类</span></span><br><span class="line">            <span class="keyword">var</span> pushButtonData1 = <span class="keyword">new</span> PushButtonData(<span class="string">&quot;tool&quot;</span>, <span class="string">&quot;创建几何体&quot;</span>, location, className);</span><br><span class="line">            <span class="comment">//按钮图标</span></span><br><span class="line">            <span class="comment">//反射技术，获得现在运行的文件集ElementCUB的路径location，然后找到它的目录Directory</span></span><br><span class="line">            <span class="keyword">var</span> imageSource1 = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + <span class="string">@&quot;\Image\设置.png&quot;</span>;</span><br><span class="line">            pushButtonData.LargeImage = <span class="keyword">new</span> BitmapImage(<span class="keyword">new</span> Uri(imageSource));</span><br><span class="line">            <span class="comment">//把pushbutton添加到panel上</span></span><br><span class="line">            <span class="keyword">var</span> pushButton1 = panel.AddItem(pushButtonData) <span class="keyword">as</span> PushButton;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建comboBOX</span></span><br><span class="line">            <span class="keyword">var</span> comboBoxData = <span class="keyword">new</span> ComboBoxData(<span class="string">&quot;选项&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> comboBox = panel.AddItem(comboBoxData) <span class="keyword">as</span> ComboBox;</span><br><span class="line">            comboBox.ItemText = <span class="string">&quot;选择操作&quot;</span>;</span><br><span class="line">            comboBox.ToolTip = <span class="string">&quot;请选择需要进行的操作&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> comboBox1 = <span class="keyword">new</span> ComboBoxMemberData(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;操作一&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> comboBox2 = <span class="keyword">new</span> ComboBoxMemberData(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;操作二&quot;</span>);</span><br><span class="line">            comboBox.AddItem(comboBox1);</span><br><span class="line">            comboBox.AddItem(comboBox2);</span><br><span class="line">            <span class="comment">//注册事件</span></span><br><span class="line">            comboBox.CurrentChanged += change;</span><br><span class="line">            comboBox.DropDownClosed += closed;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Result.Succeeded;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意这两个事件里面可以写更丰富的功能内容，这里仅是演示</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closed</span>(<span class="params"><span class="built_in">object</span> sender, ComboBoxDropDownClosedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TaskDialog.Show(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;操作一执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">change</span>(<span class="params"><span class="built_in">object</span> sender, ComboBoxCurrentChangedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TaskDialog.Show(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;操作二执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="addin-文件可以放置的位置"><a href="#addin-文件可以放置的位置" class="headerlink" title=".addin 文件可以放置的位置"></a>.addin 文件可以放置的位置</h3><p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1593803871/21441_hsewxu.png"></p>
]]></content>
      <categories>
        <category>Revit, C#</category>
      </categories>
      <tags>
        <tag>Revit, C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的一些语法</title>
    <url>/blog/2020/05/22/markdown%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题，标题等级越高字体越小。</p>
<p>注：标准语法一般在#后跟个空格再写文字</p>
<h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><h2 id="2-1-无序列表（前带圆点）"><a href="#2-1-无序列表（前带圆点）" class="headerlink" title="2.1 无序列表（前带圆点）"></a>2.1 无序列表（前带圆点）</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表内容</span><br><span class="line"><span class="bullet">+</span> 列表内容</span><br><span class="line"><span class="bullet">*</span> 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>
<p>例：</p>
<ul>
<li>列表1</li>
</ul>
<ul>
<li>列表2</li>
</ul>
<ul>
<li>列表3</li>
</ul>
<h2 id="2-1-有序列表（前带数字）"><a href="#2-1-有序列表（前带数字）" class="headerlink" title="2.1 有序列表（前带数字）"></a>2.1 有序列表（前带数字）</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 列表内容</span><br><span class="line"><span class="bullet">2.</span> 列表内容</span><br><span class="line"><span class="bullet">3.</span> 列表内容</span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>
<p>例：</p>
<ol>
<li>列表1</li>
<li>列表2</li>
<li>列表3</li>
</ol>
<h1 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3. 代码块"></a>3. 代码块</h1><p>在代码段落上下两行分别插入三个反逗号，若要代码高亮则要在反逗号后面注明是什么语言。 </p>
<h1 id="4-插入图片所需代码"><a href="#4-插入图片所需代码" class="headerlink" title="4. 插入图片所需代码"></a>4. 插入图片所需代码</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">描述</span>](<span class="link">图片链接 &#x27;&#x27;图片标题&#x27;&#x27;</span>)</span><br><span class="line">![<span class="string">描述</span>](<span class="link">图片链接</span>)![<span class="string">描述</span>](<span class="link">图片链接</span>)![<span class="string">描述</span>](<span class="link">图片链接</span>) 连续写就是并排显示图片</span><br><span class="line"></span><br><span class="line">描述就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片标题是当鼠标移到图片上时显示的内容，可加可不加</span><br></pre></td></tr></table></figure>
<p>例：<br>插入本地图片<br><img src="/blog/./Dynamo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/abc.png" alt="test picture"><br><code>![test picture](./Dynamo学习笔记-1/abc.png)</code> 好像不管用…所以我把所有图片存到了云盘<br><code>&quot;&#123;% asset_img abc.PNG This is an image %&#125;&quot;</code> ？？？</p>
<h1 id="5-改变字体颜色"><a href="#5-改变字体颜色" class="headerlink" title="5. 改变字体颜色"></a>5. 改变字体颜色</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="section">#回车换行后命令失效</span></span><br></pre></td></tr></table></figure>
<p><span style="color:red;"> 改变字体颜色至红</p>
<h1 id="6-字体"><a href="#6-字体" class="headerlink" title="6. 字体"></a>6. 字体</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span>`</span><br><span class="line"><span class="strong">**<span class="emphasis">*这是斜体加粗的文字*</span>**</span></span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>
<p>例：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p>
<h1 id="7-引用"><a href="#7-引用" class="headerlink" title="7. 引用"></a>7. 引用</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
<h1 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8. 分割线"></a>8. 分割线</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="9-生成首页摘要"><a href="#9-生成首页摘要" class="headerlink" title="9. 生成首页摘要"></a>9. 生成首页摘要</h1><p>在Markdown文档中添加<code>&lt;!-- more --&gt;</code>，代码上面的全是摘要</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这里是摘要</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">这里是正文</span><br></pre></td></tr></table></figure>

<h1 id="10-链接"><a href="#10-链接" class="headerlink" title="10. 链接"></a>10. 链接</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/191d1e21f7ed">本文参考资料</a></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit族学习笔记</title>
    <url>/blog/2020/05/26/revit%E6%97%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li>墙的踢脚线可以用墙-墙饰条来画，把偏移量设置为0就好了</li>
<li>revit 画二维节点详图，剖面出来后，用注释- 区域- 填充区域来画各种材料轮廓。注释- 构件里面可以添加已经载入的详图构件族，可以直接添加到详图里。详图里面的所有图形，选中后上方菜单可以调整显示顺序，遮盖或者不遮盖</li>
<li>tab键可以选择一个物体上的一部分点或面</li>
<li>框选了重叠的物体可以使用过滤器Filter来分离</li>
<li>材质浏览器里面，图形Grafik里面设置的东西是在着色模式里面显现；外观aussiehe里面设置的东西是在真实模式里面显现</li>
<li>出图：视图Ansicht - Planzusammenstellung - plan图纸 选定图框，然后Ansicht platzieren 放置视图</li>
</ul>
<h3 id="建族基本流程"><a href="#建族基本流程" class="headerlink" title="建族基本流程"></a>建族基本流程</h3><ol>
<li>新建一个族，选择族样板</li>
<li>确定族的类别：告诉revit你要做的是个什么东西</li>
<li>绘制参照面和参照线</li>
<li>确定当前所在的视图: 从哪个方向看它</li>
<li>确定和设置工作平面: 你在哪个平面操作它</li>
<li>建立一个三维形体</li>
<li>对三维形体进行修改</li>
<li>建立参数: 把三维形体、尺寸标注、参数， 通过锁定关联到一起</li>
<li>载入到项目并测试</li>
</ol>
<p>  <img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590261024/%E5%BB%BA%E6%97%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B_t4syka.png" alt="建族基本流程" title="建族基本流程"></p>
<ul>
<li>注意族污染： 在项目内修改编辑族，要注意其族文件是保存在本地还是服务器上，覆盖族文件时候要慎重</li>
</ul>
<h3 id="族的可见性控制方法："><a href="#族的可见性控制方法：" class="headerlink" title="族的可见性控制方法："></a>族的可见性控制方法：</h3><ol>
<li><p>Ansicht-Sichtbarkeit&#x2F;Grafiken-Beschriftungskategorien里面控制标高Ebenen显示, 使其不要显示，防止族与标高线对齐，而不是参照平面线。</p>
</li>
<li><p>针对族图元：点击图元，左侧属性栏Grafiken-Sichtbar, 不勾表示在载入项目后不可见，族中可见；若要在族中也不可见，可在下面横栏上点Sichtbarkeit von vorschau预览可见性</p>
</li>
<li><p>点击图元，在修改Änderung里有Sichtbarkeiteinstellungen, 可设置在不同视图里的可见性</p>
</li>
<li><p>临时隐藏（小眼镜）下面横栏：</p>
<ul>
<li><p>kategorie isolieren 隔离类别，仅留下选中的同类的图元，其余隐藏</p>
</li>
<li><p>kategorie ausblenden 隐藏类别</p>
</li>
<li><p>element isolieren 隔离图元</p>
</li>
<li><p>element ausblenden 隐藏图元</p>
</li>
</ul>
</li>
</ol>
<h3 id="族的架构"><a href="#族的架构" class="headerlink" title="族的架构"></a>族的架构</h3><p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590266853/%E6%97%8F%E7%9A%84%E4%B8%89%E5%B1%82%E5%88%86%E7%B1%BB_isfwy4.png" alt="族的三层分类"></p>
<p>族样板Vorlagen; 族类别（和族参数）Familienkategorien und Parameter; 族类型Familientypen</p>
<ul>
<li>族样板 .rft 分类</li>
</ul>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590267920/123_e1x0ky.png"></p>
<p>基于线里面有linie，基于面例如基于工作平面</p>
<h3 id="族类别和族参数"><a href="#族类别和族参数" class="headerlink" title="族类别和族参数"></a>族类别和族参数</h3><p>不同族类别下面对应不同的族参数，例常规模型类别的族参数有：</p>
<ol>
<li>基于工作平面： 基于依附一个面的</li>
<li>总是垂直：呈绝对角度90</li>
<li>可将钢筋附着于主体：现在建的族以后可不可以用来配钢筋</li>
<li>加载时剪切的空心：建族时候是不是预先给未来主体掏一个洞。建族时候在族上一侧开个洞口，加载到项目中后其一侧如果有主体如墙等，就会在墙上自动开洞</li>
<li><strong>共享</strong>：嵌套族会用到。是否共享取决于构件未来是否要单独进入材料表里面</li>
<li>OmniClass编号：建筑信息编码 <a href="https://bimbox.top/1822.html">https://bimbox.top/1822.html</a></li>
<li>房间计算点： 族是否作为构件被统计到房间表里</li>
<li>常规模型或家具类别的族在立面图里不能旋转，解决方法是用其他族类别如管道配件，结构连接，然后一定要勾选总是垂直。</li>
</ol>
<p><strong>子类别</strong>：点击族内图元，属性栏标识数据。定义子类别：管理-对象样式-模型对象，里面的二级菜单就是子类别，可以自己新建定义。载入项目中后，可以通过在VG里是否勾选来控制图元可见性。所以如果族在载入项目的时候，需要对族的某一部分设置不同的线型线宽和可见性，可以考虑使用子类别功能。</p>
<h3 id="建立形体"><a href="#建立形体" class="headerlink" title="建立形体"></a>建立形体</h3><p><span style="color:red;"><strong>绘制任何一个形体，要绘制相应的参照平面referenzebene。原因是想通过参照平面与形体边的锁定，来通过控制参照平面从而控制形体。因为后面设置的族参数一般是控制参照平面的</strong></p>
<p>另外，二维图形不用自己手绘，可以导入CAD图纸，然后利用拾取线来绘制</p>
<p><span style="color:blue;"><strong>参照标高这个注释要在立面图中隐藏，不然后面对齐操作会出先错误</strong></p>
<h4 id="拉伸-Extrusion"><a href="#拉伸-Extrusion" class="headerlink" title="拉伸 Extrusion"></a>拉伸 Extrusion</h4><ul>
<li><strong>绘制任何一个形体(如拉伸)，要绘制相应的参照平面referenzebene。原因是想通过参照平面与形体边的锁定，来通过控制参照平面从而控制形体。因为后面设置的族参数一般是控制参照平面的</strong></li>
<li>revit 有默认的二维和三维的绘图模式。当从平面图切换到3D图再切回来时，默认还是三维绘图模式，此时点击二维图元和参照平面不会出现小锁，要双击图元使其变粉即默认返回二维绘图模式，然后进行加锁。</li>
</ul>
<h4 id="融合-Verschmelzen"><a href="#融合-Verschmelzen" class="headerlink" title="融合 Verschmelzen"></a>融合 Verschmelzen</h4><ul>
<li>在不同的平面绘制不一样的二维形体，revit自动在三维空间将其融合成为三维实体。</li>
<li>注意画二维形体时也要绘制参照平面！</li>
<li>形体高度在左边属性栏里调，erste ende 和 zweite ende, 底部画完后点上方oben bearbeiten画上边的图形</li>
<li>通过在修改-拆分图元（element teilen) 可以在二维图形上按照自己所需获得顶点</li>
<li>通过scheitelpunkte bearbeiten编辑顶点可以控制上下图形上的各个顶点怎么互相连接</li>
<li>融合二维图形内部不能掏洞，然而拉伸可以</li>
</ul>
<h4 id="旋转-Rotieren"><a href="#旋转-Rotieren" class="headerlink" title="旋转  Rotieren"></a>旋转  Rotieren</h4><ul>
<li>需要编辑边界线Begrenzungslinie和轴线Achsenlinie</li>
<li>边界线必须闭合，边界线定义转动的图形，轴线为绕那个轴转</li>
<li>转动角度可点击图元在属性中改变：起始角度，约束角度</li>
</ul>
<h4 id="放样-Sweep"><a href="#放样-Sweep" class="headerlink" title="放样 Sweep"></a>放样 Sweep</h4><ul>
<li>拉伸是特殊的放样，拉伸是直线拉，放样是曲线拉</li>
<li>需要用到路径Pfad和轮廓Profil即横截面</li>
</ul>
<h4 id="放样融合-Sweep-Verschmelzen"><a href="#放样融合-Sweep-Verschmelzen" class="headerlink" title="放样融合 Sweep - Verschmelzen"></a>放样融合 Sweep - Verschmelzen</h4><ul>
<li>同样需要编辑pfad和profil，不同的是这里有两个轮廓，红点表示轮廓平面和路径的交点</li>
<li>和融合一样，圆图形默认有两个端点，想要改变端点个数，编辑轮廓用拆分图元</li>
</ul>
<h4 id="空心形状-Abzugskorperforemen"><a href="#空心形状-Abzugskorperforemen" class="headerlink" title="空心形状 Abzugskörperforemen"></a>空心形状 Abzugskörperforemen</h4><ul>
<li>用来给实心形体开洞的，通过拉伸，融合等方法，做减法。</li>
</ul>
<h4 id="符号线Modelllinie和模型线Symbolische-Linie"><a href="#符号线Modelllinie和模型线Symbolische-Linie" class="headerlink" title="符号线Modelllinie和模型线Symbolische Linie"></a>符号线Modelllinie和模型线Symbolische Linie</h4><ul>
<li>符号线是画在哪个视图里，就仅在这个视图里显示；模型线是在任意视图里都可以显示</li>
<li>符号线在Bschriften里面，模型线在Erstellen里面</li>
<li>点击符号线和模型线，在上面的修改面板里两线可以互相转换：linie konvertieren。 可以通过这个功能使模型线在一些视图中可见而另一些视图不可见，例如门。</li>
</ul>
<h4 id="构件Bauteil"><a href="#构件Bauteil" class="headerlink" title="构件Bauteil"></a>构件Bauteil</h4><ul>
<li>所有实体族都可以被称为构件</li>
<li>放置构件时自动选择最近载入的那个族</li>
<li>嵌套族中会用到</li>
</ul>
<h4 id="工作平面Arbeitsebene和面ebene"><a href="#工作平面Arbeitsebene和面ebene" class="headerlink" title="工作平面Arbeitsebene和面ebene"></a>工作平面Arbeitsebene和面ebene</h4><ul>
<li>先在建referenzebene, 然后festlegen选中其做工作平面，Arbeitsebene anzeigen显示工作平面</li>
<li>面ebene是创建的实体上的面</li>
</ul>
<h4 id="模型组-Modellgruppe"><a href="#模型组-Modellgruppe" class="headerlink" title="模型组 Modellgruppe"></a>模型组 Modellgruppe</h4><ul>
<li>打成的组和族可在右侧项目浏览器中找到</li>
</ul>
<h4 id="参照线referenzlinie和参照平面referenzebene"><a href="#参照线referenzlinie和参照平面referenzebene" class="headerlink" title="参照线referenzlinie和参照平面referenzebene"></a>参照线referenzlinie和参照平面referenzebene</h4><ul>
<li>参照面无论绘制多长，其都是一个无限延伸的平面，而参照线有长度属性</li>
<li>参照线可以拖动从而改变角度和宽度，可以用来定义族的参数如长度角度</li>
<li>参照面可以用来规定物体平移的参数，参照线可以用来规定物体长度和角度</li>
</ul>
<h4 id="洞口Offnung"><a href="#洞口Offnung" class="headerlink" title="洞口Öffnung"></a>洞口Öffnung</h4><ul>
<li>在主体开洞，不是在族中开洞，要基于主体的族类型才可用</li>
<li>可以直接做个洞口族，其他什么都不画，直接载入项目里给主题开洞口</li>
</ul>
<h4 id="控件Steuerelement（小工具）"><a href="#控件Steuerelement（小工具）" class="headerlink" title="控件Steuerelement（小工具）"></a>控件Steuerelement（小工具）</h4><ul>
<li>小箭头放到族里以后改变构件的方向。当把族载入项目后，点击族点击这几个小箭头可以控制改变族的位置方向。</li>
</ul>
<h3 id="修改命令Andern"><a href="#修改命令Andern" class="headerlink" title="修改命令Ändern"></a>修改命令Ändern</h3><h4 id="剪切Schnitt"><a href="#剪切Schnitt" class="headerlink" title="剪切Schnitt"></a>剪切Schnitt</h4><ul>
<li>必须是一个实心主体和一个空心主体</li>
<li>高级用法：如果想要把一个水槽放到桌子上，希望水槽下面的桌子自动开洞，可以在水槽族里加一个空心形状，但在族内不与水槽实体剪切。将整个族载入项目，注意要在族参数中勾选beim Laden mit Abkzugskörper schneiden, 载入后使用剪切命令，拿桌子减去空心形状。</li>
</ul>
<h4 id="连接verbinden"><a href="#连接verbinden" class="headerlink" title="连接verbinden"></a>连接verbinden</h4><ul>
<li>将两个相交的物体连接成一个物体</li>
</ul>
<h4 id="拆分面-Flachen-trennen"><a href="#拆分面-Flachen-trennen" class="headerlink" title="拆分面 Flächen trennen"></a>拆分面 Flächen trennen</h4><ul>
<li>在一个面上拆分出一小块，然后可用下面的farben使拆分出来的部分显示不同的材质</li>
</ul>
<h3 id="偏移-Versatz"><a href="#偏移-Versatz" class="headerlink" title="偏移 Versatz"></a>偏移 Versatz</h3><ul>
<li>只能偏移墙或线，不能偏移族模型, 需要双击点进图元里面变粉才能用。勾选kopieren则为复制一个，不勾就是移动原来的</li>
<li>分grafisch和nummerisch。前者移动鼠标确定偏移位置，后者输入距离。在底下栏调选。</li>
</ul>
<h3 id="修剪延伸stutzen-und-dehnen"><a href="#修剪延伸stutzen-und-dehnen" class="headerlink" title="修剪延伸stutzen und dehnen"></a>修剪延伸stutzen und dehnen</h3><ul>
<li>修剪延伸成角 stutzen und dehnen für ecke 相当于把修剪和延伸和在一起操作了，<strong>注意鼠标选择线的不同段表示了要保留哪段</strong>，没选的剪掉。</li>
<li>修剪延伸单个&#x2F;多个图元 是把修剪延伸分开来操作，类似于第一遍操作完是延伸，在同一点图标再操作就为修剪</li>
</ul>
<h4 id="阵列Reihe"><a href="#阵列Reihe" class="headerlink" title="阵列Reihe"></a>阵列Reihe</h4><ul>
<li>注意是否勾选成组并关联， 可以弧形阵列radial, winkel角度里面填阵列总共弧形要占的范围角度多大。阵列完了的这一套东西可以解组，不然改一个全部都改</li>
</ul>
<h4 id="黄尺子测量和尺寸标注测量"><a href="#黄尺子测量和尺寸标注测量" class="headerlink" title="黄尺子测量和尺寸标注测量"></a>黄尺子测量和尺寸标注测量</h4><ul>
<li>黄尺子点下面栏kette可以连续测量，但是不会留下尺寸标注。下面的尺寸标注测量则会留下标注，可用来设定族参数。</li>
</ul>
<h3 id="工作平面Arbeitsebene"><a href="#工作平面Arbeitsebene" class="headerlink" title="工作平面Arbeitsebene"></a>工作平面Arbeitsebene</h3><ul>
<li>工作平面： 物体绘制的一开始放在哪个平面上，跟物体没有绑定的关系</li>
<li>可以点选物体，用上方菜单的拾取新的平面，将物体放在预设好的工作平面或实体面上。若要取消与面的关联，可点击菜单里的编辑工作平面，取消关联。</li>
</ul>
<h3 id="参照平面referenzebene"><a href="#参照平面referenzebene" class="headerlink" title="参照平面referenzebene"></a>参照平面referenzebene</h3><ul>
<li>参照平面： 物体的某一部分贴在这个面上，然后物体跟随这个面变形或者运动</li>
<li><span style="color:red;"><strong>建立族参数的逻辑： 建立形体 -&gt; 画参照平面 -&gt; 给参照面加上尺寸标注 -&gt; 给尺寸标注赋予参数</strong></li>
<li><strong>不要在创建形体时候在草图模式里画参照平面，而是要出了草图模式后再画参照平面，与画好了的形体边绑定。</strong></li>
<li>参照面子类别主要用来规定不同颜色和线型从而区分不同参照面</li>
<li>参照面属性里的<strong>是参照Ist eine Referenz</strong><ol>
<li>非参照： 将参照面将丧失作为参照面的功能当载入项目里的时候</li>
<li>强参照：将族载入项目中时，强参照的边会与项目中的其他物体产生临时尺寸，方便定位，但一个族一般只有一条。弱参照反之就不会。</li>
</ol>
</li>
<li>属性栏里面定义原点bestimmt ursprung: 两个勾选了的参照面的交点就是族的<strong>原点（中心点）</strong>，即以后载入项目后鼠标的位置。</li>
<li><strong>出现错误 不能满足约束， 原因是一条边被多个参照面约束，但是一个边只能绑定一个参照面。解决这个问题，要点下面小栏里的显示约束Abhängigkeit anzeigen，找出这个边是否以及被其他参照面约束过了。</strong></li>
</ul>
<h3 id="参照线-referenzlinie"><a href="#参照线-referenzlinie" class="headerlink" title="参照线 referenzlinie"></a>参照线 referenzlinie</h3><ul>
<li>参照线的端点上也可以设置工作平面，是垂直于参照线的，<strong>按tab键选中端点</strong></li>
</ul>
<h3 id="族参数之参数属性：族参数-共享参数"><a href="#族参数之参数属性：族参数-共享参数" class="headerlink" title="族参数之参数属性：族参数&amp;共享参数"></a>族参数之参数属性：族参数&amp;共享参数</h3><ul>
<li>族类型面板中设置族参数，可以新建编辑参数</li>
<li><strong>参数类型有族参数Familienparameter和共享参数gemeinsam genutzter parameter, 族参数不能进入明细表bauteilliste里即可用字段verfügbare Felder中不会出现（明细表再ansicht里创建），但共享参数可以参与统计</strong></li>
<li><strong>共享参数需要txt文档，可以点击bearbeiten新创建一个txt文档。然后再编辑共享参数的页面，先建立参数组gruppe，再建立参数parameter，所有参数都应在某一个参数族下</strong></li>
<li><strong>小技巧</strong>：共享参数可以不与实体产生联系，即不用在实体上实现，却可以进入明细表进行统计，所以对于一些参数可以直接建共享参数统计而不一定要在几何上有所表达，可以偷懒。</li>
</ul>
<h3 id="族参数之参数属性：-类型Typ-实例Exemplar"><a href="#族参数之参数属性：-类型Typ-实例Exemplar" class="headerlink" title="族参数之参数属性： 类型Typ&amp;实例Exemplar"></a>族参数之参数属性： 类型Typ&amp;实例Exemplar</h3><ul>
<li><p>选择类型：这样的参数做出来是同一个族类型都通用的，这样改变参数，同一个类型的族都会批量改变。；例如改墙厚，那么同一墙类型比如250mm都会改变，那么参数墙厚就是选了类型后建的。(一改都改)</p>
</li>
<li><p>选择实例：导入项目后，实例参数直接出现在属性栏里，在属性栏里编辑，且仅仅只针对这个实例而不是整个类型；而类型参数要在属性栏上点编辑类型进去以后才能编辑。（只改一个）</p>
</li>
<li><p><strong><span style="color:red;">实例下面有一个报告参数，选了之后参数变灰色不能输入值更改，它的目的不是通过更改数值控制形体，而是读取形体上的数值（作用：提取数值）。它可以进入到明细表里，但是要注意上面要选择共享参数</strong></p>
</li>
<li><p>实例参数画出来的族可以在项目里用鼠标点箭头拉伸。</p>
</li>
<li><p>族类型可以导出到txt文档，具体是点族文件上面菜单的导出。这个文档要保存在和族文件在同一个文件夹。可以直接在txt中编辑添加族类型和参数。</p>
</li>
<li><p>QuickInfo bearbeiten设置起来以后，鼠标悬停这个族参数会显示提示框，里面是自己编辑的使用提示。</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590496092/231_nwhcub.png"><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590495291/32_wem2uv.png"></p>
</li>
</ul>
<h3 id="参数公式"><a href="#参数公式" class="headerlink" title="参数公式"></a>参数公式</h3><ul>
<li>公式的基本目的是通过参数限制参数。所以添加公式并锁定sperre后(建族时候)，不能用鼠标拉拽形体来改变参数了</li>
<li>报告参数进参数公式：首先这个报告参数是要基于主体的，是主体的某个尺寸或者参数，所以比方说我们的族是基于墙的族，那么这个报告参数应该是读取墙这个主题的尺寸。这样以后这个报告参数才可以进参数公式，来其他约束族参数。这样就会有改变主体墙的尺寸，族的尺寸也自动根据公式改变的效果。</li>
</ul>
<h3 id="参数分类"><a href="#参数分类" class="headerlink" title="参数分类"></a>参数分类</h3><ul>
<li><p>不同的规程Disziplin下有不同的参数类型</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590504075/1231_ilvsin.png" title="规程为“公共（Allgemein）”的族参数"></p>
</li>
<li><p>图像参数主要用于明细表中添加的缩略图</p>
</li>
<li><p>是否参数：与可见性有关，方块是否打勾</p>
</li>
<li><p>族类型参数：跟族嵌套有关</p>
</li>
</ul>
<p> <img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590503849/1343423_eerkgk.png" title="规程为“结构”的族参数"><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590503849/4141341_lzxtmv.png" title="规程为“结构”的族参数"></p>
<p>  <img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590503849/3414_xaakgq.png" title="规程为“能量”的族参数"></p>
<h3 id="小结：-我能用族参数来做什么"><a href="#小结：-我能用族参数来做什么" class="headerlink" title="小结： 我能用族参数来做什么"></a>小结： 我能用族参数来做什么</h3><ol>
<li><strong>定义尺寸</strong></li>
<li><strong>表达信息</strong></li>
<li><strong>预定义行为：比如族需要频繁更换材质，那么就把项目里的材质关联到族的材质的类型参数，就可以直接在项目里修改，而不用到族里面去了</strong></li>
<li><strong>参与族内计算：计算在族内部展开，比如族面积等于长乘宽</strong></li>
<li><strong>参与统计：共享参数，报告参数进入明细表参与统计</strong></li>
<li><strong>参与项目计算：计算在项目里展开，族参数在项目里面参与计算，比如结构计算需要墙族的密度弹性模量等</strong></li>
</ol>
<h3 id="建族时候应该添加哪些参数"><a href="#建族时候应该添加哪些参数" class="headerlink" title="建族时候应该添加哪些参数"></a>建族时候应该添加哪些参数</h3><ol>
<li>需要变化的尺寸</li>
<li>项目需求的信息</li>
<li>标准规定的信息（国内一般为地方标准）</li>
<li>经验判断（可参考官方的族里面添加了哪些参数）</li>
</ol>
<h3 id="嵌套族"><a href="#嵌套族" class="headerlink" title="嵌套族"></a>嵌套族</h3><ul>
<li>一个族里面套很多族，族中加族</li>
<li><strong>所有嵌套族里面，要做对齐命令，不要对齐形体本身的变线，一定要用tab键拾取二级族里面的参照平面，才不会出现错误。可以在二级族里面事先先给参照平面命名，便于拾取。</strong></li>
<li>在一个族里画的的形体尺寸变形只能在族里改变，一旦这个族载入到项目中去或者载入其他族中，那么就必须事先设置参数控制形体，否则就是一个死族。所以当二级族载入到一级族里后，要在一级族里面设置参数使两者关联，这样载入项目中才能控制整体。</li>
</ul>
<h3 id="嵌套族：关联参数"><a href="#嵌套族：关联参数" class="headerlink" title="嵌套族：关联参数"></a>嵌套族：关联参数</h3><ul>
<li><p>把两个族关联起来成为一个组合，如桌椅组合。如果单纯的把桌子和椅子载入到一个族文件里成为桌椅组合族，这个族载入到项目里面是没有任何参数的，因为二级族桌和椅子的参数被嵌套一次后就消失了。这里就需要关联参数</p>
</li>
<li><p>具体操作方法：先在一级族里面新建参数，然后在二级族里面在对应的参数框里点击关联族参数。之后二级族的参数会变灰，我们就可以通过一级族的参数来控制二级族</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590601827/31241_igtque.png"></p>
</li>
<li><p>这里注意：如果在上图中没有发现关联族参数这个按钮，那么要将这个参数改成实例参数，那直接在属性栏里就会有关联族参数按钮。</p>
</li>
<li><p>一级族在设置族参数的时候，可以选在公共规程下，参数类型为族类型的参数。这个可用来控制二级族的族类型。</p>
</li>
</ul>
<h3 id="多层嵌套：-转换族样板"><a href="#多层嵌套：-转换族样板" class="headerlink" title="多层嵌套： 转换族样板"></a>多层嵌套： 转换族样板</h3><ul>
<li><strong>例如想在幕墙上放灯，直接把灯载入幕墙族无法识别位置，所以逻辑是把灯族嵌套到基于面的公制模型族里，然后再把这个族嵌套到幕墙族里。这样的多层嵌套实现了公制灯族族样板转换为基于面的族样板，从而可以识别幕墙放置。</strong>注意此时对于族参数也要多层关联才能带到项目里去。</li>
</ul>
<h3 id="嵌套族的“共享”选项"><a href="#嵌套族的“共享”选项" class="headerlink" title="嵌套族的“共享”选项"></a>嵌套族的“共享”选项</h3><ul>
<li><p>在族类别和族参数菜单中有共享这个选项可以勾选；在族文件左侧属性栏其他里面有共享选项。</p>
</li>
<li><p>嵌套族勾选<strong>共享</strong>：</p>
<ol>
<li>可以tab单独选择小族直接在项目里控制改变参数，不用再一层层去关联参数了。但注意小族的这个参数必须是类型参数</li>
</ol>
</li>
</ul>
<ol start="2">
<li>小族（即二，三级族）可以tab单独选取所以就可用单独标注。</li>
<li>勾选了共享的小族可以进入明细表 </li>
<li>明细表可以通过过滤选择，排除掉不需要的东西</li>
<li>共享按钮只影响小族，最终族勾不勾无所谓</li>
<li>注意：如果小族不想进入明细表统计，那么就不要勾选共享，否则会再明细表出现重复。但也可以通过在明细表里添加过滤条件来筛选。具体操作是要在想要统计的小族里加上一个参数，然后把这个参数添加到明细表字段里，然后过滤条件选这个字段。</li>
</ol>
<h3 id="全局参数：-终极嵌套"><a href="#全局参数：-终极嵌套" class="headerlink" title="全局参数： 终极嵌套"></a>全局参数： 终极嵌套</h3><ul>
<li>传统的嵌套族是把小族载入到大族里面，然后通过关联参数，把可以通过控制大族的参数从而控制小族，然后载入到项目中。但是我们可以把项目看作是一个终极大族，里面嵌套了不同的的族，我们现在可以通过全局参数选项，在项目中建立一个参数，与其他小族关联</li>
<li>把一个族载入到项目后，在项目里点选这个族，在左侧属性栏参数边上有关联全局参数选项globale parameter zuordnen。可以在这里新建全局参数，或者在上面菜单verwalten-einstellungen-Globale parameter</li>
<li>关联全局参数的意义：使得项目中不相关的族的参数建立关联。比如把族A的参数A关联到全局参数A上，把族B的参数B关联到全局参数B上，然后在管理面板的全局参数面板给它俩赋予公式，这俩参数就关联起来了，修改其中一个，另一个也发生变化。</li>
<li>全局参数不能进入明细表里</li>
</ul>
<h3 id="项目参数"><a href="#项目参数" class="headerlink" title="项目参数"></a>项目参数</h3><ul>
<li>给这个项目里面的同类别的所有族，一次性批量加入同一个参数，叫做项目参数。就避免了重复进入族操作</li>
<li>位置是在上面菜单栏verwalten-einstellungen-projektparameter</li>
<li>项目参数可以进入明细表里，但是要关联全局参数</li>
</ul>
<h3 id="族参数的公式"><a href="#族参数的公式" class="headerlink" title="族参数的公式"></a>族参数的公式</h3><ul>
<li>公式的作用：用显性参数自动控制隐性参数</li>
<li>公式中有两个参数及以上时数值就会灰显</li>
<li>注意逻辑上的可行性，两个参数不能相互参照，避免报错循环参照kreisreferenz</li>
<li>对于简单的加减乘除：<br>1. 优先计算乘除法<br> 2. 若优先算加减法，需要加小括号<br> 3. 公式的单位需一致<br> 4. 数值类参数才能参与运算<br> 5. 单个参数的公式可以逆向影响，多个参数的则不行</li>
</ul>
<h3 id="一些特殊运算公式"><a href="#一些特殊运算公式" class="headerlink" title="一些特殊运算公式"></a>一些特殊运算公式</h3><ul>
<li>阵列公式：具体方法是先用菜单将族阵列，鼠标选择阵列数量，在上面的小菜单栏里给数量添加标签（即参数），那么就有族参数里就有阵列数量了。</li>
<li>取整：直接打在公式栏里<ul>
<li>round()：小数位四舍五入取整</li>
<li>roundup()： 向上取整</li>
<li>rounddown()：向下取整</li>
</ul>
</li>
<li>指数 A^B</li>
<li>对数 log(A)</li>
<li>平方根 sqrt(A)</li>
<li>绝对值 abs(A)</li>
<li>三角函数<ul>
<li>sin(A)</li>
<li>cos(A)</li>
<li>tan(A)</li>
<li>asin(A)</li>
<li>acos(A)</li>
<li>atan(A)</li>
</ul>
</li>
<li>圆周率 pi()</li>
</ul>
<h3 id="是-否参数和条件公式"><a href="#是-否参数和条件公式" class="headerlink" title="是&#x2F;否参数和条件公式"></a>是&#x2F;否参数和条件公式</h3><ul>
<li><p>打对勾的参数就是是&#x2F;否参数： 比如可见性</p>
</li>
<li><p>是否参数本身可以写成公式：&#x3D;A&gt;3：含义：数值大于3才可见</p>
</li>
<li><p>条件公式的格式：<code>if(条件，条件为真的结果，条件为假的结果)</code></p>
<ul>
<li><p>if里面的条件可以是：</p>
<ol>
<li><p>是否参数</p>
</li>
<li><p>数值比较（&gt;;&lt;;&#x3D;)</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>条件参数的布尔运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=IF ( AND (x = 1 , y = 2), 8 , 3 )</span><br><span class="line">=IF ( OR ( A = 1 , B = 3 ) , 8 , 3 )</span><br><span class="line">=IF ( NOT ( A = 1 , B = 3 ) , 8 , 3 )</span><br><span class="line">//IF公式同样可用嵌套：</span><br><span class="line">B=IF ( A &lt; 30 , 2, IF (A&lt; 45, 3, IF ( A&lt; 55, 5 , 8 ) ) )</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="官方的遮阳棚实例族"><a href="#官方的遮阳棚实例族" class="headerlink" title="官方的遮阳棚实例族"></a>官方的遮阳棚实例族</h3><ul>
<li>学习别人做的族时，查看族参数先看没有公式的，便于理解</li>
<li>而且要活用上方搜索菜单，可输入没有公式的参数，看其出现在了哪些参数公式中</li>
</ul>
<h3 id="轮廓族"><a href="#轮廓族" class="headerlink" title="轮廓族"></a>轮廓族</h3><p>用在哪些地方？</p>
<ul>
<li>常规</li>
<li>墙<ul>
<li>分隔条</li>
<li>墙饰条</li>
</ul>
</li>
<li>屋顶<ul>
<li>封檐板</li>
<li>檐沟</li>
</ul>
</li>
<li>条形基础</li>
<li>栏杆扶手</li>
<li>楼板边缘</li>
<li>楼梯<ul>
<li>前缘</li>
<li>支撑</li>
<li>踏板</li>
<li>踢面</li>
</ul>
</li>
<li>幕墙竖梃，就是分割幕墙的条</li>
<li>在轮廓族里设置可用范围</li>
<li>灵活使用轮廓族：载入到项目里做近似构件；作为嵌套族的一部分</li>
</ul>
]]></content>
      <categories>
        <category>revit</category>
      </categories>
      <tags>
        <tag>revit</tag>
      </tags>
  </entry>
  <entry>
    <title>基于simplex算法的非线性优化</title>
    <url>/blog/2020/05/30/%E5%9F%BA%E4%BA%8Esimplex%E7%AE%97%E6%B3%95%E7%9A%84%E9%9D%9E%E7%BA%BF%E6%80%A7%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Non-linear-Optimisation-Linearisation"><a href="#Non-linear-Optimisation-Linearisation" class="headerlink" title="Non-linear Optimisation&#x2F;Linearisation"></a>Non-linear Optimisation&#x2F;Linearisation</h1><h2 id="1-1-Assignment"><a href="#1-1-Assignment" class="headerlink" title="1.1           Assignment"></a>1.1           Assignment</h2><p>Within the activities to rearrange the outside facilities of an IGA (Internationale Gartenausstellung) area at several locations one of two mobile units – a mobile drill unit and a mobile crane - will be required. Since installation efforts are high a many operations as possible should be combined to one more extended operation. Yet, shifting single activities to fit into the lager operation also requires effort leading to a two-dimensional optimisation problem: The construction period will be 3 years and these data are given furthermore:</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852710/Optimiereung/1_uuxxiy.png"></p>
<p>Elaborate, how many assignments are optimally to be combined. Therefore, linearise the target function regarding total cost sufficiently accurate and use the Simplex-Algorithm to calculate.</p>
<h2 id="1-2-The-Target-Functions"><a href="#1-2-The-Target-Functions" class="headerlink" title="1.2           The Target Functions"></a>1.2           The Target Functions</h2><p>After collating the information in the above task, we can obtain the parameters needed to build the target functions and mark them in red in the following table. The local cost c is obtained by multiplying the parameter  s1  by the parameter s2. In addition, based on the total number of assignments and the construction period, we can get the number of assignments e in one year. </p>
<p>Table 1.1 Parameters of target functions</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th>mobile dill</th>
<th>mobile crane</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Fixed cost  E (€)</td>
<td>1250</td>
<td>1915</td>
</tr>
<tr>
<td align="left">duration s1 (h)</td>
<td>4</td>
<td>3</td>
</tr>
<tr>
<td align="left">cost&#x2F;h  s2  (€&#x2F;h)</td>
<td>450</td>
<td>250</td>
</tr>
<tr>
<td align="left">local cost  c (€)</td>
<td>1800</td>
<td>750</td>
</tr>
<tr>
<td align="left">relocate device cost (€) s3</td>
<td>100</td>
<td>70</td>
</tr>
<tr>
<td align="left">Total number of assignments e</td>
<td>90</td>
<td>150</td>
</tr>
<tr>
<td align="left">construction period (a)</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td align="left">number of assignments  e (in one  year)</td>
<td>30</td>
<td>50</td>
</tr>
<tr>
<td align="left">cost v for reschedule an assignment (€&#x2F;day)</td>
<td>47</td>
<td>35</td>
</tr>
</tbody></table>
<p>The formula of the Target function is as follows. It mainly describes the relationship between the number of assignments and the cost. It is obviously non-linear.<br>$$<br>k(x)&#x3D;E\ast e&#x2F;x+e\ast(c+s_3)+x&#x2F;5\ast v\ast 365<br>$$<br>By substituting the values in the above table into the formula, the cost curve k1 of mobile drill and the cost curve k2 of mobile crane can be obtained respectively:</p>
<p>mobile drill k1:<br>$$<br>k(x)&#x3D;  37500&#x2F;x+3431x+57000<br>$$<br>mobile crane k2:<br>$$<br>k(x)&#x3D;  95750&#x2F;x+2555x+41000<br>$$<br>Table 1.2 Excel-table: Costs for different x</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852709/Optimiereung/231_lkuhu6.png"></p>
<p>Figure 1.1 Cost curves k1 and k2</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530172644434_ggju3v.png"></p>
<h2 id="1-3-Linearisation"><a href="#1-3-Linearisation" class="headerlink" title="1.3           Linearisation"></a>1.3           Linearisation</h2><h3 id="1-3-1-General-Approach"><a href="#1-3-1-General-Approach" class="headerlink" title="1.3.1        General Approach"></a>1.3.1        General Approach</h3><p>Non-linear target functions can be modified using linearization approach. The principle of this approach is replacing the non-linear function by polygonal chains. The function can be written as a summation over terms which contain only one variable each. Then these terms can be approximated as polygonal chain. (Eber, 10&#x2F;2018) Hence, a function G (x1, x2 ,…xi) needs to be given as: </p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530172915979_tm1kik.png"> <img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530172938109_llyscb.png"></p>
<p>Then each of the terms can be approximated:</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530172951156_auepkj.png"></p>
<h3 id="1-3-2-Linearisation-mobile-drill-k1"><a href="#1-3-2-Linearisation-mobile-drill-k1" class="headerlink" title="1.3.2        Linearisation mobile drill k1"></a>1.3.2        Linearisation mobile drill k1</h3><p>From the table and diagram in the previous chapter we can estimate the range where the optimal number of assignments is located. So we intercepted the curve of the target function in the x range of 1 to 11, and then divided x in 10 intervals form 1 to 11.</p>
<p>Figure 1.3 Divide x in 10 intervals</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530173000798_sd7iwr.png"><br>$$<br>k(x)&#x3D;  37500&#x2F;x+3431x+57000<br>$$<br><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590853827/Optimiereung/123123_kgcdor.png"></p>
<p>In order to simplify the polynomial, the constant terms such as k(1), k(2),…k(10) can be ignored because they don’t influence our x - value. In addition, (x-1), (x-2),…(x-10) in the polynomial are equivalent to x1, x2,… x10. From the above two points we can simplify the polynomial and make it to our new target function as follows:</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590853827/Optimiereung/23144_hkwkjc.png"></p>
<p>The new boundary conditions:<br>$$<br>0≤x_1,x_2,…x_{10}≤1<br>$$<br>We can now solve this linear problem using the online simplex calculator: (<a href="https://linprog.com/main-simplex-method/result">https://linprog.com/main-simplex-method/result</a>)</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530173013193_sitym2.png"></p>
<p>which means:<br>$$<br>x_1&#x3D;x_2&#x3D;1,x_3…x_{10}&#x3D;0<br>$$<br>Figure 1.4 Using polygonal chain to find x</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530173019715_kgqo70.png"><br>$$<br>∴x&#x3D;1+[1+1]&#x3D;3,k(3)&#x3D;79793<br>$$<br><strong>Solution:</strong> For mobile drill, 3 assignments per year cause the least cost.</p>
<h3 id="1-3-3-Linearisation-mobile-crane-k2"><a href="#1-3-3-Linearisation-mobile-crane-k2" class="headerlink" title="1.3.3       Linearisation mobile crane k2"></a>1.3.3       Linearisation mobile crane k2</h3><p>Similar to the mobile drill we also intercepted the curve of the target function in the x range of 1 to 11, and then divided x in 10 intervals from 1 to 11.<br>$$<br>k(x)&#x3D;  95750&#x2F;x+2555x+41000<br>$$<br><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590853827/Optimiereung/21312412_e7nhzx.png"></p>
<p>Simplify the polynomial to get new target function:</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590853827/Optimiereung/3123_gji19b.png"></p>
<p>Boundary conditions:<br>$$<br>0≤x_1,x_2,…x_{10}≤1<br>$$<br>Solve this linear problem using the online simplex calculator: (<a href="https://linprog.com/main-simplex-method/result">https://linprog.com/main-simplex-method/result</a>)</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852675/Optimiereung/image-20200530173027453_jbew8r.png"></p>
<p>which means:<br>$$<br>x_1&#x3D;x_2&#x3D;x_3&#x3D;x_4&#x3D;x_5&#x3D;1,x_6…x_{10}&#x3D;0<br>$$<br>Figure 1.5 Using polygonal chain to find x</p>
<p><img src="https://res.cloudinary.com/dpf7ofkmq/image/upload/v1590852676/Optimiereung/image-20200530173035374_zwp1if.png"><br>$$<br>∴x&#x3D;1+[1+1+1+1+1]&#x3D;6,k(6)&#x3D;72288.33<br>$$<br><strong>Solution:</strong> For mobile crane, 6 assignments per year cause the least cost.</p>
<h2 id="1-4-Conclusion"><a href="#1-4-Conclusion" class="headerlink" title="1.4           Conclusion"></a>1.4           Conclusion</h2><p>According to the calculation, the optimal assignment combination is: 3 assignments per year for mobile drill + 6 assignments per year for mobile crane. The cost of this combination is 152,081.33€ per year.</p>
]]></content>
      <categories>
        <category>Optimiereungsverfahren</category>
      </categories>
      <tags>
        <tag>Optimierungsverfahren</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/blog/2023/12/28/test/</url>
    <content><![CDATA[<p>test, test</p>
]]></content>
  </entry>
</search>
